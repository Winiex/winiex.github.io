<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bach is coding</title>
  <subtitle>$ tail -f life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bachiscoding.com/"/>
  <updated>2016-07-06T16:34:39.143Z</updated>
  <id>http://bachiscoding.com/</id>
  
  <author>
    <name>winiex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Octotree：在 Chrome 里用树状的方式浏览 Github 的文件</title>
    <link href="http://bachiscoding.com/2016/07/07/octotree-plugin-for-github-in-chrome/"/>
    <id>http://bachiscoding.com/2016/07/07/octotree-plugin-for-github-in-chrome/</id>
    <published>2016-07-06T16:17:39.000Z</published>
    <updated>2016-07-06T16:34:39.143Z</updated>
    
    <content type="html">&lt;p&gt;一直以来，Github 的文件浏览功能都不能够满足我的日常使用需求，直到今天我发现了 &lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octotree&lt;/a&gt; 这款 Chrome 浏览器插件。这款插件能够在 Github 的项目页面的左边提供一个树形菜单，让用户能够更方便地浏览项目内的文件，从而避免每次浏览都需要刷新整个页面。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这是该插件的实际效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/7441e0e8-4396-11e6-a4c9-9776666e098f.png&quot; alt=&quot;Octotree Plugin&quot;&gt;&lt;/p&gt;
&lt;p&gt;冥冥之中感觉 Github 在未来会把这个功能收编 :)。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来，Github 的文件浏览功能都不能够满足我的日常使用需求，直到今天我发现了 &lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot;&gt;Octotree&lt;/a&gt; 这款 Chrome 浏览器插件。这款插件能够在 Github 的项目页面的左边提供一个树形菜单，让用户能够更方便地浏览项目内的文件，从而避免每次浏览都需要刷新整个页面。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://bachiscoding.com/categories/tools/"/>
    
      <category term="github" scheme="http://bachiscoding.com/categories/tools/github/"/>
    
    
  </entry>
  
  <entry>
    <title>Hadoop 中的 Configuration</title>
    <link href="http://bachiscoding.com/2016/06/10/configuration-in-hadoop/"/>
    <id>http://bachiscoding.com/2016/06/10/configuration-in-hadoop/</id>
    <published>2016-06-09T16:24:41.000Z</published>
    <updated>2016-07-07T12:16:44.865Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;从这篇文章开始，我将把自己对 Hadoop 系统的一些学习经验整理成文章分享出来，算是对自己学习过程的梳理和知识的分享。我主要会从源代码的角度去探索 Hadoop 中的各个组件的技术细节，使用的是 &lt;a href=&quot;https://github.com/apache/hadoop/tree/branch-2.7.2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2.7.2&lt;/a&gt; 的源代码。&lt;/p&gt;
&lt;p&gt;一个成熟的软件系统必备的组件之一就是配置系统。配置系统负责将纷繁复杂的配置项按照一定的既定规则管理起来，从而让系统的其他组件不必重复处理类似于配置加载、配置 Override、扩展配置字段中的引用符号等细节。我所熟悉的 Tornado、Django、Laravel 等 Web 框架都会有一套自己严格规定的配置系统；这也引导了我平时新开一个项目的时候，第一时间着手实现的就是配置管理模块——这是因为我相信配置管理被成熟地实现会避免一系列问题（尤其是部署过程中的）。久而久之，在 Python Web 开发领域我已经有了自己的一套「最佳实践」——配置存储于 JSON、YAML 文件，使用脚本将内容映射为 Python 模块对象，使用时直接导入变量即可，而配置文件本身本地、开发机与线上各自保存一份，与代码部署过程分离（这样可以避免本地的、开发机器上的或生产环境的配置文件随频率更高的代码部署流程误部署）。大型系统甚至会衍生出自己的配置管理服务（例如&lt;a href=&quot;http://www.infoq.com/cn/articles/weibao-config-service-practice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博的实践&lt;/a&gt;）来应对日益复杂的配置管理工作，而开源社区也贡献了 &lt;a href=&quot;https://coreos.com/etcd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;etcd&lt;/a&gt; 这种优秀的解决方案。&lt;/p&gt;
&lt;p&gt;Hadoop 中的配置系统和我前述的自己的「最佳实践」的做法类似——数据主要存储于 XML 文件中，由 &lt;a href=&quot;https://hadoop.apache.org/docs/r2.7.2/api/org/apache/hadoop/conf/Configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;org.hadoop.conf.Configuration&lt;/a&gt; 类负责配置加载、Override、字段扩展等工作，每个 Hadoop 组件在启动后都会拥有自己的 Configuration 实例（最常见的就是 MapReduce 2 程序中你在 job 代码的 main 方法里 new 的那个），需要获取或者设置某个配置字段时只需要调用相应的方法即可。这种做法在 Java 社区比较常见，Tomcat、Spring 等知名 Java 项目都采用了类似的方案。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Configuration-简介&quot;&gt;&lt;a href=&quot;#Configuration-简介&quot; class=&quot;headerlink&quot; title=&quot;Configuration 简介&quot;&gt;&lt;/a&gt;Configuration 简介&lt;/h2&gt;&lt;p&gt;下面我们对 Configuration 的一些基本功能做一些介绍。&lt;/p&gt;
&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;深入了解一段代码的原理从了解其接口开始，了解其接口则从会使用它开始&lt;/code&gt;。下面是一段 Configuration 使用的实例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.bachiscoding.hadoop.lab.conf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by winiex on 16-6-10.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicUsage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 1. Configuration 对象是可以直接实例化的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Configuration configuration = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 2. 通过调用 addResource 方法来将配置资源注册到 Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 对象中，这个时候 Configuration 对象内还没有加载配置中的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        configuration.addResource(&lt;span class=&quot;string&quot;&gt;&quot;conf/hdfs-default.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 3. 通过调用 get 方法来获取配置项转化为 String 类型后的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String value1 = configuration.get(&lt;span class=&quot;string&quot;&gt;&quot;dfs.datanode.address&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(value1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 4. 可以通过 set 方法来设置配置项的值，值的类型为 String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        configuration.set(&lt;span class=&quot;string&quot;&gt;&quot;dfs.datanode.address&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;New Value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value1 = configuration.get(&lt;span class=&quot;string&quot;&gt;&quot;dfs.datanode.address&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(value1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 5. 也可以指定要获取的配置项值的类型，对应的值会被转化为相应的类型的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value2 = configuration.getInt(&lt;span class=&quot;string&quot;&gt;&quot;hadoop.hdfs.configuration.version&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(value2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 6. 设置配置项的值时也可以制定类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        configuration.setInt(&lt;span class=&quot;string&quot;&gt;&quot;hadoop.hdfs.configuration.version&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value2 = configuration.getInt(&lt;span class=&quot;string&quot;&gt;&quot;hadoop.hdfs.configuration.version&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(value2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码中存储配置数据的 &lt;code&gt;hdfs-default.xml&lt;/code&gt; 文件是一个保存在某个 Java Classpath 中的 conf 目录下的 XML 文件，其结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.hdfs.configuration.version&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;version of this configuration file&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.datanode.address&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.0.0:50010&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      The datanode server address and port for data transfer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;Application&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 在结构上 Configuration 可以嵌套，最终的值会会和上面的解析在一起，本质上没有区别 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.hdfs.configuration.version&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;version of this configuration file&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;Testing&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有 Hadoop 使用经验的朋友应该遇到过程序找不到配置文件的错误，这是因为打包时没有把相应的 XML 配置文件放到 Jar 文件的 resources 目录下或者运行程序时没有包含配置所在的路径到 JVM 的 Classpath 中去。对于  String 类型的 Resource，Configuration 会在加载配置时根据它的值到 Classpath 中去寻找相应的文件，这一块后面我们分析加载配置数据的部分的代码时会涉及到。对于刚才的例子，如果是用 Maven 打包的程序，配置文件可以放到下图所示的目录下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/0b6e0368-3c88-11e6-8e75-072ca02ef1c5.png&quot; alt=&quot;Where to place config files&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 MapReduce 程序中 Configuration 的样例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WordCount&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TokenizerMapper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IntSumReducer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;IntWritable&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Configuration conf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Job job = Job.getInstance(conf, &lt;span class=&quot;string&quot;&gt;&quot;word count&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conf.setInt(&lt;span class=&quot;string&quot;&gt;&quot;param1&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.exit(job.waitForCompletion(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 MapReduce 程序运行的过程中，这个 Configuration 对象会被通过 Hadoop 的序列化机制共享到各个角色中（Mapper、Combiner、Reducer 等），这样各个角色都能够通过它获得该 MapReduce 程序的配置数据，代码里面设置的 param1 在各个角色里面都可以获取到。&lt;/p&gt;
&lt;h3 id=&quot;配置的可覆盖性&quot;&gt;&lt;a href=&quot;#配置的可覆盖性&quot; class=&quot;headerlink&quot; title=&quot;配置的可覆盖性&quot;&gt;&lt;/a&gt;配置的可覆盖性&lt;/h3&gt;&lt;p&gt;使用过 Hadoop 的朋友应该会知道，如果在运行 MapReduce 程序的时候，在命令行参数中加入 &lt;code&gt;-D&lt;/code&gt; 参数，是可以制定甚至覆盖掉某个配置项的值的：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hadoop jar wordcount.jar -Dfoo=bar &lt;span class=&quot;comment&quot;&gt;#这样在 wordcount 运行的过程中，Configuration 对象会包含 foo = bar 这一配置项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种配置的可覆盖性是 Configuration 提供的一种方便开发的机制，通过运行程序是手动指定配置项，我们可以方便地去定制 Job 的一些基本环境，例如容器虚拟 CPU 个数、容器堆内存大小等。我之前遇到过某个 Job 总是因为默认的容器堆内存过小被 Kill 掉的问题，最后就是通过手动指定更大的容器堆内存来解决的。&lt;/p&gt;
&lt;h3 id=&quot;不可被覆盖的-final-配置&quot;&gt;&lt;a href=&quot;#不可被覆盖的-final-配置&quot; class=&quot;headerlink&quot; title=&quot;不可被覆盖的 final 配置&quot;&gt;&lt;/a&gt;不可被覆盖的 final 配置&lt;/h3&gt;&lt;p&gt;参数默认情况下是可以被覆盖的，但有些参数我们也是希望我们指定了其他人就不能覆盖了。这个时候可以使用 final 属性来达到目的：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.ssl.client.conf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;ssl-client.xml&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;final&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;final&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;指定了 final 属性为 true 后，其他人就不能通过覆盖的方式改变它的值了。如果要强行覆盖该配置的话，你指定的值不会起作用，而且 Configuration 会在 Log 中输出 Warning 信息。&lt;/p&gt;
&lt;h3 id=&quot;配置的扩展&quot;&gt;&lt;a href=&quot;#配置的扩展&quot; class=&quot;headerlink&quot; title=&quot;配置的扩展&quot;&gt;&lt;/a&gt;配置的扩展&lt;/h3&gt;&lt;p&gt;在某些场景下，我们的某个配置项是依赖于另一个配置项的，这个时候如果配置项能够按照引用的方式来扩展就会很方便。Configuration 提供了这个机制，我们最熟悉的例子是 hadoop.tmp.dir 和 dfs.datanode.data.dir：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;hadoop.tmp.dir&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;/tmp/hadoop&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.datanode.data.dir&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;file://$&amp;#123;hadoop.tmp.dir&amp;#125;/dfs/data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们看到，dfs.datanode.data.dir 的值中用 &lt;code&gt;${KEY_NAME}&lt;/code&gt; 的形式引用了 hadoop.tmp.dir 的值。在 Configuration 获取 dfs.datanode.data.dir 的值时，会将该部分替换为 hadoop.tmp.dir 的值，最终结果为 /tmp/hadoop/dfs/data。这个配置扩展的机制类似于 Bash 脚本中引用某个变量。&lt;/p&gt;
&lt;p&gt;接下来我们来了解一下 Configuration 的结构。&lt;/p&gt;
&lt;h2 id=&quot;Configuration-的结构&quot;&gt;&lt;a href=&quot;#Configuration-的结构&quot; class=&quot;headerlink&quot; title=&quot;Configuration 的结构&quot;&gt;&lt;/a&gt;Configuration 的结构&lt;/h2&gt;&lt;p&gt;简化后的 Configuration 类的 UML 结构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/f2184b04-4393-11e6-b240-0f5eada557cc.svg&quot; alt=&quot;UML Class Diagram of Configuration&quot;&gt;&lt;/p&gt;
&lt;p&gt;Configuration 实现了 &lt;a href=&quot;http://hadoop.apache.org/docs/current/api/org/apache/hadoop/io/Writable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;org.apache.hadoop.io.Writable&lt;/a&gt; 接口和 Iterator 接口。实现前者的目的是为了让 Configuration 能够利用到 Hadoop 的序列化机制，从而能够在系统内不同服务角色上传输、共享。实现后者的目的是为了让我们能够用&lt;a href=&quot;https://en.wikipedia.org/wiki/Iterator_pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;迭代器模式&lt;/a&gt;来访问 Configuration 内的配置项：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.bachiscoding.hadoop.lab.conf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by winiex on 16-7-2.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IterateConf&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Configuration configuration = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        configuration.addResource(&lt;span class=&quot;string&quot;&gt;&quot;conf/hdfs-default.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获得 Configuration 对象的迭代器对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Iterator&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; confIter = configuration.iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (confIter.hasNext()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Map.Entry&amp;lt;String, String&amp;gt; entry = confIter.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String key = entry.getKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String value = entry.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Configuration 中很大一部分方法是以 get/set 来开头的，这个做法 Java 程序员不会陌生。只让调用者通过这些方法来访问 Configuration 的配置数据，可以封装掉底层的实现细节（例如后面会介绍的 Lazy Loading 机制），让 API 变得一致，让开发变得简单好维护。&lt;/p&gt;
&lt;p&gt;Configuration 需要一个保存配置项数据的地方，它就是 UML 类图中的 properties 成员变量，它是一个 &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java.util.Properties&lt;/a&gt; 对象。Configuration 加载配置资源的内容后会将处理完毕的配置项的数值保存在 properties 里面。&lt;/p&gt;
&lt;p&gt;resources 成员变量是一个包含了 Resource 类的 ArrayList，它记录了 Configuration 对象有哪些配置资源需要加载。而 Resource 是 Configuration 内私有的一个类型，代表了一个配置资源。Configuration 支持的配置资源有：「字符串」（存在于 CLASSPATH 中的资源）、「URL」、「Path」（存在于 HDFS 中的配置文件）、「InputStream」和「另一个 Configuration」。&lt;/p&gt;
&lt;h2 id=&quot;Configuration-源码分析&quot;&gt;&lt;a href=&quot;#Configuration-源码分析&quot; class=&quot;headerlink&quot; title=&quot;Configuration 源码分析&quot;&gt;&lt;/a&gt;Configuration 源码分析&lt;/h2&gt;&lt;p&gt;下面我们在代码层面从几个方面详细地了解其工作机理。&lt;/p&gt;
&lt;h3 id=&quot;初始化过程&quot;&gt;&lt;a href=&quot;#初始化过程&quot; class=&quot;headerlink&quot; title=&quot;初始化过程&quot;&gt;&lt;/a&gt;初始化过程&lt;/h3&gt;&lt;p&gt;初始化一个 Configuration 最简单的方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Configuration configuration = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们都知道，在 JVM 初始化一个 &lt;code&gt;类&lt;/code&gt; (注意，不是实例)时，会最先执行类内部的 static 代码块，来完成一些属于类的初始化工作。在 Configuration 中就通过这个方式，用一段 static 代码块注册了默认配置文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//print deprecation warning if hadoop-site.xml is found in classpath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 获取 ClassLoader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ClassLoader cL = Thread.currentThread().getContextClassLoader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cL == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cL = Configuration.class.getClassLoader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// hadoop-site.xml 是已经被废弃的配置文件，所以如果 Classpath 中还存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 该文件的话会输出一句 Warning 至日志文件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cL.getResource(&lt;span class=&quot;string&quot;&gt;&quot;hadoop-site.xml&quot;&lt;/span&gt;)!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG.warn(&lt;span class=&quot;string&quot;&gt;&quot;DEPRECATED: hadoop-site.xml found in the classpath. &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;Usage of hadoop-site.xml is deprecated. Instead use core-site.xml, &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        + &lt;span class=&quot;string&quot;&gt;&quot;mapred-site.xml and hdfs-site.xml to override properties of &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;core-default.xml, mapred-default.xml and hdfs-default.xml &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;respectively&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 将 core-default.xml、core-site.xml 注册，保存这些默认注册信息的是&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// defaultResources 这个静态变量，它是一个 CopyOnWriteArrayList&amp;lt;String&amp;gt; 对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addDefaultResource(&lt;span class=&quot;string&quot;&gt;&quot;core-default.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addDefaultResource(&lt;span class=&quot;string&quot;&gt;&quot;core-site.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们恍然大悟：原来 &lt;code&gt;core-default.xml&lt;/code&gt; 和 &lt;code&gt;core-site.xml&lt;/code&gt; 这两个贯穿整个 Hadoop 体系的配置文件就是在这里注册的。所有使用 Configuration 来管理配置的 Hadoop 组件都会注册这两个文件，同时也会根据自己的需求注册数据自己的默认配置文件：例如，HDFS 组件会注册 &lt;code&gt;hdfs-default.xml&lt;/code&gt; 和 &lt;code&gt;hdfs-site.xml&lt;/code&gt;。这个规律被很多 Hadoop 组件所遵守。&lt;/p&gt;
&lt;p&gt;另外，&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CopyOnWriteArrayList&lt;/a&gt; 是一个采用了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Copy-on-write&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Copy on Write&lt;/a&gt; 模式的线程安全的 ArrayList，在这里使用是为了保证多线程环境下 Configuration 能够安全地工作。&lt;/p&gt;
&lt;p&gt;如果静态初始化代码已经执行过了，则会进一步调用构造方法。这里我们调用了默认构造方法，它的代码很简单：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** A new configuration. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 调用重载的构造方法，该方法含有一个指定是否加载默认配置的参数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认构造器调用了指定是否加载默认配置的构造器：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** A new configuration where the behavior of reading from the default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * resources can be turned off.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * If the parameter &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; loadDefaults&amp;#125; is false, the new instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * will not load resources from the default files.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; loadDefaults specifies whether to load from the default files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; loadDefaults)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 保存是否加载默认配置的值，在后面 Lazy Loading 的时候来判断是否加载默认配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadDefaults = loadDefaults;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// updatingResource 记录了变更的配置项的值以及变更的来源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updatingResource = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, String[]&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(Configuration.class) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// REGISTRY 用于记录整个 JVM 进程中所有的 Configuration 对象，从而&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在注册新的默认配置的时候可以让每个 Configuration 对象都能及时更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 配置数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    REGISTRY.put(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 updatingResource 实例使用了 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConcurrentHashMap&lt;/a&gt; 来&lt;a href=&quot;http://stackoverflow.com/questions/510632/whats-the-difference-between-concurrenthashmap-and-collections-synchronizedmap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;保证在多线程的环境下的并发访问效率&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;REGISTRY 是 Configuration 类的静态成员变量，它是一个 &lt;code&gt;WeakHashMap&amp;lt;Configuration, Object&amp;gt;&lt;/code&gt;(&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/WeakHashMap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/questions/5511279/what-is-a-weakhashmap-and-when-to-use-it&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2&lt;/a&gt;) 对象。在这里只用到了 key set 来保存 JVM 系统中所有存活的 Configuration 对象的引用，从而在默认配置更新的时候能够统一进行配置更新：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Add a default resource. Resources are loaded in the order of the resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * added.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name file name. File should be present in the classpath.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addDefaultResource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!defaultResources.contains(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defaultResources.add(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Configuration conf : REGISTRY.keySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 当默认配置项发生变化时，重新加载每个 Configuration 对象的配置数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(conf.loadDefaults) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        conf.reloadConfiguration();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始化部分的代码并不复杂，需要注意的地方在于并发数据结构的使用。&lt;/p&gt;
&lt;h3 id=&quot;Lazy-Loading&quot;&gt;&lt;a href=&quot;#Lazy-Loading&quot; class=&quot;headerlink&quot; title=&quot;Lazy Loading&quot;&gt;&lt;/a&gt;Lazy Loading&lt;/h3&gt;&lt;p&gt;Configuration 不会在 addResource 之后就马上把所有实例的配置源的数据加载一遍，而是会在使用者需要获取某个配置项时再进行加载。这是标准的 Lazy Loading 策略。另，刚才我们已经接触了用于添加默认配置资源的 addDefaultResource 方法，这个方法里面调用了 Configuration 的 reloadConfiguration 方法。从字面意义上理解，这个方法应该重新加载了所有配置资源，但实际上并不是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Reload configuration from previously added resources.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * This method will clear all the configuration read from the added&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * resources, and final parameters. This will make the resources to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * be read again before accessing the values. Values that are added&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * via set methods will overlay values read from the resources.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reloadConfiguration&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  properties = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;                            &lt;span class=&quot;comment&quot;&gt;// trigger reload&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  finalParameters.clear();                      &lt;span class=&quot;comment&quot;&gt;// clear site-limits&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;reloadConfiguration 只做了两件事情：将 properties 重置为 null，将 finalParameters 清空。properties 是一个 &lt;code&gt;java.util.Properties&lt;/code&gt; 对象，为 Configuration 对象的成员变量。Configuration 加载的所有配置项的值最终都保存在这里。而 finalParameters 则为一个 &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt; 对象，它记录了那些被标记为 final 的配置项，从而阻止该配置项的值被覆盖掉。&lt;/p&gt;
&lt;p&gt;真正发生配置资源加载的时间点是获取配置项值调用 getProps 方法的时候。我们以 get 方法为例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Get the value of the &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt;. If the key is deprecated,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * it returns the value of the first key which replaces the deprecated key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * and is not null.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * If no such property exists,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * then &amp;lt;code&amp;gt;defaultValue&amp;lt;/code&amp;gt; is returned.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name property name, will be trimmed before get value.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; defaultValue default value.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; property value, or &amp;lt;code&amp;gt;defaultValue&amp;lt;/code&amp;gt; if the property&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         doesn&#39;t exist.                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, String defaultValue)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String[] names = handleDeprecation(deprecationContext.get(), name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String result = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String n : names) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获得属性值，并且进行配置项扩展，获得最终结果。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// getProps 负责加载配置资源的内容，处理后将配置数据保存到 properties 成员变量里面，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 然后返回 properties 给调用者。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result = substituteVars(getProps().getProperty(n, defaultValue));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只在需要的时候加载最少的必要的资源，这是 Lazy Loading 的核心思想。&lt;/p&gt;
&lt;h3 id=&quot;加载、解析配置资源&quot;&gt;&lt;a href=&quot;#加载、解析配置资源&quot; class=&quot;headerlink&quot; title=&quot;加载、解析配置资源&quot;&gt;&lt;/a&gt;加载、解析配置资源&lt;/h3&gt;&lt;p&gt;刚才遇到的 getProps 方法的实现细节如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; Properties &lt;span class=&quot;title&quot;&gt;getProps&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果 properties 为 null，则证明配置资源还没有加载，否则直接返回它就行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (properties == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    properties = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Properties();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 因为 loadResources 的过程会改变 updatingResource 的内容，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 所以这里通过复制将其备份了一次，以便后面回复 overlay 中配置项的该部分的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Map&amp;lt;String, String[]&amp;gt; backup =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, String[]&amp;gt;(updatingResource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 加载所有配置资源，处理其包含的数据，填入到 properties 对象中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loadResources(properties, resources, quietmode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// overlay 保存了所有经 set 方法设置的配置项的值，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这些值会在获得配置项的时候覆盖掉从配置资源中加载的配置数据，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 进而保证最终 properties 中被 set 方法设置的值一定是&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 当时设置的值，而不受 loadResources 的过程影响。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 个人认为这是一个 hack。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (overlay != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      properties.putAll(overlay);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;Object,Object&amp;gt; item: overlay.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// updatingResource 保存了通过 set 方法设置的某个配置项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 的来源，因为 loadResources 的过程中可能加载和 overlay 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 配置项同名的配置项，进而引起 updatingResource 中的该配置项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 的记录不一致，所以这里需要按照 backup 中的内容修复一下。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String key = (String)item.getKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String[] source = backup.get(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(source != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          updatingResource.put(key, source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; properties;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;加载配置资源的动作发生在 loadResources 方法中：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadResources&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Properties properties,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           ArrayList&amp;lt;Resource&amp;gt; resources,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; quiet)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// loadDefaults 这个变量在这里其作用了，如果为 true，则加载默认配置资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(loadDefaults) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String resource : defaultResources) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      loadResource(properties, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Resource(resource), quiet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//support the hadoop-site.xml as a deprecated case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getResource(&lt;span class=&quot;string&quot;&gt;&quot;hadoop-site.xml&quot;&lt;/span&gt;)!=&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      loadResource(properties, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Resource(&lt;span class=&quot;string&quot;&gt;&quot;hadoop-site.xml&quot;&lt;/span&gt;), quiet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 加载我们通过 addResource 方法注册的配置资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; resources.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Resource ret = loadResource(properties, resources.get(i), quiet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resources.set(i, ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以发现，loadResources 方法并没有资源加载的实现细节，具体实现在 loadResource 方法中：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Resource &lt;span class=&quot;title&quot;&gt;loadResource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Properties properties, Resource wrapper, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; quiet)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String name = UNKNOWN_RESOURCE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获得资源以及其名字，资源有多种种类，所以这里用 Object 存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Object resource = wrapper.getResource();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = wrapper.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 初始化解析 XML 所需要的组件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这里开发者选择了一次读取全部内容的 DOM 的解析方式，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这是因为在 Hadoop 的面对的场景下 XML 配置资源所包含的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 量都很小，一起性全部读到内存中反而实现起来更方便，也不会出现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 明显的效率问题。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 效率优化的手段是要严格地参考具体的场景来权衡的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DocumentBuilderFactory docBuilderFactory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      = DocumentBuilderFactory.newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//ignore all comments inside the xml file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docBuilderFactory.setIgnoringComments(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//allow includes in the xml file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Hadoop XML 配置是支持 include 机制的，我们&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 可以在一个配置资源中用 XML 的方式去 include 另一个配置资源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docBuilderFactory.setNamespaceAware(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        docBuilderFactory.setXIncludeAware(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedOperationException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LOG.error(&lt;span class=&quot;string&quot;&gt;&quot;Failed to set setXIncludeAware(true) for parser &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              + docBuilderFactory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              + &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; + e,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DocumentBuilder builder = docBuilderFactory.newDocumentBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Document doc = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Element root = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 标志是否返回缓存用的 Properties 对象，当配置资源是 InputStream 类型时为 true。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; returnCachedProperties = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 接下来根据 resource 的类型来对其进行对应的处理。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// parse 的一系列重载方法具体实现了从某个配置资源将数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 读取并解析的过程。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resource &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; URL) &amp;#123;                  &lt;span class=&quot;comment&quot;&gt;// an URL resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 处理 URL 类型的配置资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      doc = parse(builder, (URL)resource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resource &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; String) &amp;#123;        &lt;span class=&quot;comment&quot;&gt;// a CLASSPATH resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 处理 String 类型的配置资源，这种情况下 resource 保存了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// JVM CLASSPATH 中可以寻找到的资源。getResource 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 会用 class loader 去寻找这个资源并返回。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      URL url = getResource((String)resource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      doc = parse(builder, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resource &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Path) &amp;#123;          &lt;span class=&quot;comment&quot;&gt;// a file resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 处理 Path 类型的资源，也就是 HDFS 中的配置资源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Can&#39;t use FileSystem API or we get an infinite loop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// since FileSystem uses Configuration API.  Use java.io.File instead.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(((Path)resource).toUri().getPath())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .getAbsoluteFile();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!quiet) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          LOG.debug(&lt;span class=&quot;string&quot;&gt;&quot;parsing File &quot;&lt;/span&gt; + file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doc = parse(builder, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedInputStream(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(file)), ((Path)resource).toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resource &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; InputStream) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 处理 InputStream 形式的配置资源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      doc = parse(builder, (InputStream) resource, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 一般情况下 InputStream 类型的配置资源意味着背后很可能是&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 访问网络这种延时高的、不可靠的动作，而且配置信息在程序运行过程中几乎不会变化，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 所以有必要性和可能性将数据读取后保存在一个 Properties 对象中做缓存提高效率。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      returnCachedProperties = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resource &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Properties) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 处理 Properties 形式的配置资源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      overlay(properties, (Properties)resource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resource &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Element) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// resource 本身就是 XML 解析结果，无需处理。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      root = (Element)resource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (doc == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (quiet) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// quiet 模式下解析失败，直接返回 null。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 非 quiet 模式下解析失败，抛出一个 RuntimeException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(resource + &lt;span class=&quot;string&quot;&gt;&quot; not found&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      root = doc.getDocumentElement();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 默认情况下， toAddTo 就是 this.properties，这意味着后面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将配置项通过 loadProperty 方法写入 toAddTo 时就是更改了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// this.properties 中的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Properties toAddTo = properties;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(returnCachedProperties) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 当 resource 是 InputStream 类型时，toAddTo 是一个新的 Properties&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 对象，这意味着后面 loadProperty 并没有更改 this.properties。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 这样做的目的是为了后面将 InputStream 中的配置内容包装成 Resource 返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 给调用者。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      toAddTo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Properties();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果配置资源中包含的 XML 根节点不是 configuration，则其结构非法，抛出错误。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;string&quot;&gt;&quot;configuration&quot;&lt;/span&gt;.equals(root.getTagName()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LOG.fatal(&lt;span class=&quot;string&quot;&gt;&quot;bad conf file: top-level element not &amp;lt;configuration&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获得 root 节点中的字节点，对其进行迭代并处理。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NodeList props = root.getChildNodes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获得被废弃掉的配置项列表。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DeprecationContext deprecations = deprecationContext.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; props.getLength(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Node propNode = props.item(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(propNode &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Element))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Element prop = (Element)propNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 如果子节点的根节点是 configuration，则表示它是一个内嵌的配置组，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 所以接下来递归地去处理这部分。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;configuration&quot;&lt;/span&gt;.equals(prop.getTagName())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loadResource(toAddTo, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Resource(prop, name), quiet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 配置项既不是内嵌的 configuration 也不是包含配置信息的 property，抛出警告。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;string&quot;&gt;&quot;property&quot;&lt;/span&gt;.equals(prop.getTagName()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LOG.warn(&lt;span class=&quot;string&quot;&gt;&quot;bad conf file: element not &amp;lt;property&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 配置项是 property，获取其子节点处理之。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      NodeList fields = prop.getChildNodes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 配置的名字，也就是 key。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String attr = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 配置的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String value = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// finalParameter 表明该配置项是否是 final 的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; finalParameter = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// source 记载了配置项的来源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LinkedList&amp;lt;String&amp;gt; source = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; fields.getLength(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node fieldNode = fields.item(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(fieldNode &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Element))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Element field = (Element)fieldNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获取配置项的名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;.equals(field.getTagName()) &amp;amp;&amp;amp; field.hasChildNodes())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          attr = StringInterner.weakIntern(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ((Text)field.getFirstChild()).getData().trim());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获取配置项的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;.equals(field.getTagName()) &amp;amp;&amp;amp; field.hasChildNodes())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          value = StringInterner.weakIntern(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ((Text)field.getFirstChild()).getData());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获取配置项的 final 属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;final&quot;&lt;/span&gt;.equals(field.getTagName()) &amp;amp;&amp;amp; field.hasChildNodes())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          finalParameter = &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;.equals(((Text)field.getFirstChild()).getData());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获取配置项的 source 属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;.equals(field.getTagName()) &amp;amp;&amp;amp; field.hasChildNodes())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          source.add(StringInterner.weakIntern(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ((Text)field.getFirstChild()).getData()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      source.add(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Ignore this parameter if it has already been marked as &#39;final&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (attr != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果配置项是已经废弃掉的，则将其替换成新的对应的配置项的名字。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (deprecations.getDeprecatedKeyMap().containsKey(attr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          DeprecatedKeyInfo keyInfo =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              deprecations.getDeprecatedKeyMap().get(attr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          keyInfo.clearAccessed();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String key : keyInfo.newKeys) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// update new keys with deprecated key&#39;s value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// key 是废弃掉的配置项的 key 替换出来的新的 key，有可能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 一个废弃的 key 对应了多个新的 key。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 将替换 key 后的配置项的值填充到 toAddTo 中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            loadProperty(toAddTo, name, key, value, finalParameter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                source.toArray(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[source.size()]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// 将配置项的值填充到 toAddTo 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          loadProperty(toAddTo, name, attr, value, finalParameter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              source.toArray(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[source.size()]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (returnCachedProperties) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 配置资源是 InputStream，代码运行进入该分支。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// overlay 方法负责将 toAddTo 中的内容合并到 this.properties 中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      overlay(properties, toAddTo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 将从 InputStream 中读取的内容封装成 Resource 对象后返回，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 调用者如果想缓存之，可以自行决定——因为只有调用者了解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// InputStream 背后的数据源的延时大小、可靠性。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Resource(toAddTo, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在非 InputStream 类型的配置资源的情况下，不会返回从资源中读取的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 配置内容，这些内容已经合并到 this.properties 中去了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG.fatal(&lt;span class=&quot;string&quot;&gt;&quot;error parsing conf &quot;&lt;/span&gt; + name, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (DOMException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG.fatal(&lt;span class=&quot;string&quot;&gt;&quot;error parsing conf &quot;&lt;/span&gt; + name, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (SAXException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG.fatal(&lt;span class=&quot;string&quot;&gt;&quot;error parsing conf &quot;&lt;/span&gt; + name, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ParserConfigurationException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG.fatal(&lt;span class=&quot;string&quot;&gt;&quot;error parsing conf &quot;&lt;/span&gt; + name , e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;loadResource 方法中用 loadProperty 将某个配置项加入到 Properties 对象中，用 overlay 方法来将某个 Properties 对象的值合并到另一个里面去：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// name 是配置资源的名字，而不是配置项的 key，attr 才是。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// finalParameter 表明了该配置项是否是不可更改的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// source 表明了该配置项从哪里来。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadProperty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Properties properties, String name, String attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String value, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; finalParameter, String[] source)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || allowNullValueProperties) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!finalParameters.contains(attr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; allowNullValueProperties) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果 value 为 null 而配置允许空值，则赋予一个约定好的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 常量表示该配置项的值为空。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = DEFAULT_STRING_CHECK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 填入配置项的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      properties.setProperty(attr, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 标记配置项的来源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(source != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        updatingResource.put(attr, source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!value.equals(properties.getProperty(attr))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 要更改 final 属性的配置项，在 log 中输出 warning。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LOG.warn(name+&lt;span class=&quot;string&quot;&gt;&quot;:an attempt to override final parameter: &quot;&lt;/span&gt;+attr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          +&lt;span class=&quot;string&quot;&gt;&quot;;  Ignoring.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果配置项为 final，则将其标记之供下次有人要更改时判断。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (finalParameter &amp;amp;&amp;amp; attr != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    finalParameters.add(attr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将 from 中的值合并到 to 中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;overlay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Properties to, Properties from)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Entry&amp;lt;Object, Object&amp;gt; entry: from.entrySet()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    to.put(entry.getKey(), entry.getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体的 XML 解析发生在 parse 方法中：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个方法是对另一个 InputStream 接口的方法的封装，比较简单。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Document &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DocumentBuilder builder, URL url)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, SAXException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!quietmode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 非 quietmode，输出日志。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG.debug(&lt;span class=&quot;string&quot;&gt;&quot;parsing URL &quot;&lt;/span&gt; + url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (url == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; parse(builder, url.openStream(), url.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 解析 InputStream 中的内容，返回解析好的 org.w3c.dom.Document 对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Document &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DocumentBuilder builder, InputStream is,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String systemId)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, SAXException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!quietmode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 非 quietmode，输出日志。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOG.debug(&lt;span class=&quot;string&quot;&gt;&quot;parsing input stream &quot;&lt;/span&gt; + is);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (systemId == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) ? builder.parse(is) : builder.parse(is,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        systemId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    is.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置项扩展&quot;&gt;&lt;a href=&quot;#配置项扩展&quot; class=&quot;headerlink&quot; title=&quot;配置项扩展&quot;&gt;&lt;/a&gt;配置项扩展&lt;/h3&gt;&lt;p&gt;在 Lazy Loading 那部分我们接触到了 get 方法的实现，其中使用了 substituteVars 方法来对配置项进行扩展，其实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Attempts to repeatedly expand the value &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; expr&amp;#125; by replacing the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * left-most substring of the form &quot;$&amp;#123;var&amp;#125;&quot; in the following precedence order&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;ol&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   &amp;lt;li&amp;gt;by the value of the Java system property &quot;var&quot; if defined&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   &amp;lt;li&amp;gt;by the value of the configuration key &quot;var&quot; if defined&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;/ol&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * If var is unbounded the current state of expansion &quot;prefix$&amp;#123;var&amp;#125;suffix&quot; is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * returned.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; expr the literal value of a config key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; null if expr is null, otherwise the value resulting from expanding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * expr using the algorithm above.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IllegalArgumentException when more than&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Configuration#MAX_SUBST&amp;#125; replacements are required&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 这个方法负责配置项的扩展。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;substituteVars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String expr)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (expr == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String eval = expr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 一次循环代表了一次扩展：这是因为有可能扩展完毕的结果有可能还存在一个未扩展的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// MAX_SUBST 是 Hadoop 开发者实现定义好的常量，默认为 20，代表对一个配置项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 最多进行 20 次扩展。通常情况下已经够用了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; s &amp;lt; MAX_SUBST; s++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 找到「$」、「&amp;#123;」、「&amp;#125;」这些符号是否存在，以及都在 eval 的哪里。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] varBounds = findSubVariable(eval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (varBounds[SUB_START_IDX] == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 没有找到 $&amp;#123;foobar&amp;#125; 这样的结构，直接返回。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; eval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 找到了 $&amp;#123;foobar&amp;#125;，将其 key 提取出来——也就是提取出 foobar。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String var = eval.substring(varBounds[SUB_START_IDX],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        varBounds[SUB_END_IDX]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// val 就是扩展后的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String val = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 优先从系统默认的属性中获取扩展配置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      val = System.getProperty(var);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(SecurityException se) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      LOG.warn(&lt;span class=&quot;string&quot;&gt;&quot;Unexpected SecurityException in Configuration&quot;&lt;/span&gt;, se);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (val == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 系统默认的配置中没有，则从已经加载的配置内容中获取扩展配置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      val = getRaw(var);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (val == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 最终没有找到要扩展的配置项，这个时候保留 $&amp;#123;foobar&amp;#125; 不动继续。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; eval; &lt;span class=&quot;comment&quot;&gt;// return literal $&amp;#123;var&amp;#125;: var is unbound&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获得「$」符号的 index。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dollar = varBounds[SUB_START_IDX] - &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;&quot;&lt;/span&gt;.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获得「&amp;#125;」符号后一个字符的 index。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; afterRightBrace = varBounds[SUB_END_IDX] + &lt;span class=&quot;string&quot;&gt;&quot;&amp;#125;&quot;&lt;/span&gt;.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// substitute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将 $&amp;#123;foobar&amp;#125; 整个替换为找到的那个值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eval = eval.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, dollar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           + val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           + eval.substring(afterRightBrace);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Variable substitution depth too large: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  + MAX_SUBST + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * This is a manual implementation of the following regex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &quot;\\$\\&amp;#123;[^\\&amp;#125;\\$\u0020]+\\&amp;#125;&quot;. It can be 15x more efficient than&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * a regex matcher as demonstrated by HADOOP-11506. This is noticeable with&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Hadoop apps building on the assumption Configuration#get is an O(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * hash table lookup, especially when the eval is a long string.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; eval a string that may contain variables requiring expansion.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; a 2-element int array res such that&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * eval.substring(res[0], res[1]) is &quot;var&quot; for the left-most occurrence of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * $&amp;#123;var&amp;#125; in eval. If no variable is found -1, -1 is returned.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 这个方法负责寻找配置项的值中的「$」「[」「]」符号的位置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] findSubVariable(String eval) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] result = &amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; matchStart;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftBrace;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// scanning for a brace first because it&#39;s less frequent than $&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// that can occur in nested class names&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 因为 Java 内部类的名字中存在「$」符号，所以实现中并不优先寻找该符号，而是寻找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 在配置扩展场景中更为常见的「[」符号。这体现了按照场景和统计情况来做优化的思路。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  match_loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (matchStart = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, leftBrace = eval.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&#39;&lt;/span&gt;, matchStart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// minimum left brace position (follows &#39;$&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       leftBrace &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// right brace of a smallest valid expression &quot;$&amp;#123;c&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 配置项至少是 $&amp;#123;c&amp;#125; 这样的形式，也就是说 key 长度至少为 1。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;amp;&amp;amp; leftBrace + &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;c&quot;&lt;/span&gt;.length() &amp;lt; eval.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 类似于 KMP 算法的思路，这里每次往前跳的位数是尽可能大的而不是仅仅一位。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 这是一个优化的手段。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       leftBrace = eval.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&#39;&lt;/span&gt;, matchStart)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; matchedLen = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果「&amp;#123;」符号的左边是「$」符号，则表明发现了一个需要扩展的地方。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (eval.charAt(leftBrace - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&#39;$&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 扩展配置项 key 起始的位置。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; subStart = leftBrace + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// after &#39;&amp;#123;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 寻找 key 起始位置最靠近的右边的「&amp;#125;」符号从而确定 key 的终点。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = subStart; i &amp;lt; eval.length(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (eval.charAt(i)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;#125;&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 找到了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (matchedLen &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// match&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              result[SUB_START_IDX] = subStart;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              result[SUB_END_IDX] = subStart + matchedLen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// 使用标志点退出大循环。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; match_loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// fall through to skip 1 char&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;$&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 发现扩展配置项中还包含可扩展的配置项，开始优先获取该扩展项的 key。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            matchStart = i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; match_loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            matchedLen++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// scanned from &quot;$&amp;#123;&quot;  to the end of eval, and no reset via &#39; &#39;, &#39;$&#39;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//    no match!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; match_loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// not a start of a variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      matchStart = leftBrace + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 最终返回的是符合要求的扩展配置的 key 的开始、结尾在 eval 中的 index。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上配置扩展的逻辑并不复杂，用流程图可以总结如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/f688fcdc-4380-11e6-89c1-9707c159c204.svg&quot; alt=&quot;State Diagram for Config Expansion&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解一个事物的最佳实践之一就是举一个恰当的例子&lt;/strong&gt;。我们以扩展下面配置数据中的 config4 为例子：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;config1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;R.I.P&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;starman&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;config2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;config1&amp;#125;,David&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;config3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;config2&amp;#125;Bowie&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;config4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;config3&amp;#125;.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终按照之前的逻辑扩展完毕后，config4 的值为&lt;code&gt;R.I.P,DavidBowie.&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一个需要注意的问题是配置扩展最多允许 20 次&lt;code&gt;迭代&lt;/code&gt;，过多的话会保留原样返回。这个是由 &lt;code&gt;Configuration.MAX_SUBST&lt;/code&gt; 这个变量来决定的，一般情况下 20 次扩展机会已经绰绰有余了。比较特殊的情况是下面这种循环扩展的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;foo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;foo$&amp;#123;bar&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;bar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;foo&amp;#125;bar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果尝试去获取 foo 的值，配置会被扩展 20 次后返回一个包含 &lt;code&gt;${foo}&lt;/code&gt; 的字符串——因为没有使用递归的实现策略，Stack Overflow 的情况并不会发生。&lt;code&gt;除非你十分确定编译器/解释器对你的递归程序有确定行为的优化，严肃的生产环境下一定要谨慎使用递归。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取配置项的值&quot;&gt;&lt;a href=&quot;#获取配置项的值&quot; class=&quot;headerlink&quot; title=&quot;获取配置项的值&quot;&gt;&lt;/a&gt;获取配置项的值&lt;/h3&gt;&lt;p&gt;通过前面几个部分，实际上我们对获取某个配置项的值的过程实际上已经比较明确了。这里我们再进一步研究一下获得某种类型的配置项的值的过程。我们以 getInt 为例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Get the value of the &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt; property as an &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * If no such property exists, the provided default value is returned,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * or if the specified value is not a valid &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * then an error is thrown.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name property name.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; defaultValue default value.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; NumberFormatException when the value is invalid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; property value as an &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         or &amp;lt;code&amp;gt;defaultValue&amp;lt;/code&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; defaultValue)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String valueString = getTrimmed(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (valueString == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; defaultValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String hexString = getHexDigits(valueString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 是 16 进制的数字，按照 16 进制的方式进行转化。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hexString != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Integer.parseInt(hexString, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 是普通的 10 进制数字，按照普通的方式转化。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Integer.parseInt(valueString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Get the value of the &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt; property as a trimmed &amp;lt;code&amp;gt;String&amp;lt;/code&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; if no such property exists.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * If the key is deprecated, it returns the value of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the first key which replaces the deprecated key and is not null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Values are processed for &amp;lt;a href=&quot;#VariableExpansion&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * before being returned.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name the property name.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the value of the &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt; or its replacing property,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         or null if no such property exists.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getTrimmed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// get 方法我们前面已经介绍过了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String value = get(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 去除掉字符串两边的空白字符。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 判断并进一步将字符串类型转化为 16 进制形式的字符串以方便进一步转化为 Integer。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getHexDigits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; negative = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String str = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String hexString = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果以「-」符号开头，表示其为负数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    negative = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    str = value.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 去掉打头的「0x」或「0X」，只拿数字部分。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (str.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;0x&quot;&lt;/span&gt;) || str.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;0X&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hexString = str.substring(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (negative) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      hexString = &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; + hexString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hexString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 不是 16 进制的数字，返回 null。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到整个流程并不复杂，主要是考虑到了一些进制、空白字符等问题。其他类似的方法也是类似的流程。&lt;/p&gt;
&lt;h3 id=&quot;设置配置项的值&quot;&gt;&lt;a href=&quot;#设置配置项的值&quot; class=&quot;headerlink&quot; title=&quot;设置配置项的值&quot;&gt;&lt;/a&gt;设置配置项的值&lt;/h3&gt;&lt;p&gt;设置配置项的值的接口和获取配置项的值的接口类似，存在一个通用的 set 方法和类型特有的类似与 setInt 这样的方法。我们先研究 set 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Set the &amp;lt;code&amp;gt;value&amp;lt;/code&amp;gt; of the &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt; property. If&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt; is deprecated, it also sets the &amp;lt;code&amp;gt;value&amp;lt;/code&amp;gt; to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the keys that replace the deprecated key. Name will be trimmed before put&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * into configuration.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name property name.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; value property value.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; source the place that this configuration value came from&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * (For debugging).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; IllegalArgumentException when the value or name is null.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, String value, String source)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 先做必要的参数检测。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Preconditions.checkArgument(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Property name must not be null&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Preconditions.checkArgument(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      value != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;The value of property &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot; must not be null&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 去除掉两端多余的空白字符。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name = name.trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 获取废弃掉的配置项的新旧 key 对照表。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DeprecationContext deprecations = deprecationContext.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (deprecations.getDeprecatedKeyMap().isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getProps();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 在 this.overlay 和 this.properties 中分别写入配置项。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getOverlay().setProperty(name, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getProps().setProperty(name, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果必要，设置默认 source。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String newSource = (source == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&quot;programatically&quot;&lt;/span&gt; : source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!isDeprecated(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 配置项没有废弃掉，则记录其来源。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updatingResource.put(name, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[] &amp;#123;newSource&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 有可能该配置项存在其他名字但意义等同的配置项，存在的话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在一一将其设置为现在要设置的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String[] altNames = getAlternativeNames(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(altNames != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String n: altNames) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!n.equals(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          getOverlay().setProperty(n, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          getProps().setProperty(n, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          updatingResource.put(n, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[] &amp;#123;newSource&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果是已经废弃掉的 key，则将其替换为新的对应的 key 再写入一遍。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String[] names = handleDeprecation(deprecationContext.get(), name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String altSource = &lt;span class=&quot;string&quot;&gt;&quot;because &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot; is deprecated&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String n : names) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      getOverlay().setProperty(n, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      getProps().setProperty(n, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      updatingResource.put(n, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[] &amp;#123;altSource&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在前面的部分我们介绍过 overlay 变量保存了通过 set 方法设置的配置项的值，并保证最终获取配置项的时候，通过 set 方法设置的值不会被配置资源中原有的该配置项的值覆盖掉。&lt;/p&gt;
&lt;p&gt;接下来我们去了解一下为某个类型定制的 set 方法。我们以 setInt 为例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Set the value of the &amp;lt;code&amp;gt;name&amp;lt;/code&amp;gt; property to an &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name property name.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; value &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt; value of the property.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setInt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set(name, Integer.toString(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的情况比 getInt 要简单：直接将 value 转化为正确的 String 类型后再调用 set 方法即可。&lt;/p&gt;
&lt;h2 id=&quot;跋&quot;&gt;&lt;a href=&quot;#跋&quot; class=&quot;headerlink&quot; title=&quot;跋&quot;&gt;&lt;/a&gt;跋&lt;/h2&gt;&lt;p&gt;至此，Configuration 核心部分的逻辑及实现细节我们已经总结完毕了，剩下的类似于「替换废弃掉的 key」这样的非主要部分的实现，读者可以自行前往&lt;a href=&quot;https://github.com/apache/hadoop/blob/branch-2.7.2/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码处&lt;/a&gt;进一步了解。&lt;code&gt;复杂的软件并不是玄而又玄的东西，深入地去了解，它们实际上都是由很简单的思维、方法、实践组合、发展起来的&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果您作为读者有什么疑问、错误需要讨论、指出的话，欢迎留言。&lt;/p&gt;
&lt;embed src=&quot;http://www.xiami.com/widget/0_1769863606/singlePlayer.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;257&quot; height=&quot;33&quot; wmode=&quot;transparent&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;从这篇文章开始，我将把自己对 Hadoop 系统的一些学习经验整理成文章分享出来，算是对自己学习过程的梳理和知识的分享。我主要会从源代码的角度去探索 Hadoop 中的各个组件的技术细节，使用的是 &lt;a href=&quot;https://github.com/apache/hadoop/tree/branch-2.7.2&quot;&gt;2.7.2&lt;/a&gt; 的源代码。&lt;/p&gt;
&lt;p&gt;一个成熟的软件系统必备的组件之一就是配置系统。配置系统负责将纷繁复杂的配置项按照一定的既定规则管理起来，从而让系统的其他组件不必重复处理类似于配置加载、配置 Override、扩展配置字段中的引用符号等细节。我所熟悉的 Tornado、Django、Laravel 等 Web 框架都会有一套自己严格规定的配置系统；这也引导了我平时新开一个项目的时候，第一时间着手实现的就是配置管理模块——这是因为我相信配置管理被成熟地实现会避免一系列问题（尤其是部署过程中的）。久而久之，在 Python Web 开发领域我已经有了自己的一套「最佳实践」——配置存储于 JSON、YAML 文件，使用脚本将内容映射为 Python 模块对象，使用时直接导入变量即可，而配置文件本身本地、开发机与线上各自保存一份，与代码部署过程分离（这样可以避免本地的、开发机器上的或生产环境的配置文件随频率更高的代码部署流程误部署）。大型系统甚至会衍生出自己的配置管理服务（例如&lt;a href=&quot;http://www.infoq.com/cn/articles/weibao-config-service-practice&quot;&gt;微博的实践&lt;/a&gt;）来应对日益复杂的配置管理工作，而开源社区也贡献了 &lt;a href=&quot;https://coreos.com/etcd/&quot;&gt;etcd&lt;/a&gt; 这种优秀的解决方案。&lt;/p&gt;
&lt;p&gt;Hadoop 中的配置系统和我前述的自己的「最佳实践」的做法类似——数据主要存储于 XML 文件中，由 &lt;a href=&quot;https://hadoop.apache.org/docs/r2.7.2/api/org/apache/hadoop/conf/Configuration.html&quot;&gt;org.hadoop.conf.Configuration&lt;/a&gt; 类负责配置加载、Override、字段扩展等工作，每个 Hadoop 组件在启动后都会拥有自己的 Configuration 实例（最常见的就是 MapReduce 2 程序中你在 job 代码的 main 方法里 new 的那个），需要获取或者设置某个配置字段时只需要调用相应的方法即可。这种做法在 Java 社区比较常见，Tomcat、Spring 等知名 Java 项目都采用了类似的方案。&lt;/p&gt;
    
    </summary>
    
      <category term="hadoop" scheme="http://bachiscoding.com/categories/hadoop/"/>
    
      <category term="java" scheme="http://bachiscoding.com/categories/hadoop/java/"/>
    
    
  </entry>
  
  <entry>
    <title>【译注】Columnar Storage - 列式存储</title>
    <link href="http://bachiscoding.com/2015/11/24/annotations-on-paper-trail-columnar-storage/"/>
    <id>http://bachiscoding.com/2015/11/24/annotations-on-paper-trail-columnar-storage/</id>
    <published>2015-11-24T15:16:22.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;最近一段时间，我主要在构建公司的数据决策系统。依照规划，公司内部打算在 Hadoop 集群上借助 Impala 来实现一个近实时化的 SQL 执行环境，让它来提供数据查询接口给前端报表系统。这套系统的基础思想来自 Google 于 2010 年发表的一篇 paper：&lt;a href=&quot;http://research.google.com/pubs/pub36632.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dremel - Interactive Analysis of Web-Scale Datasets&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要降低查询的延时，涉及到了一系列的优化手段，其中列式存储的方案便是其一。这篇文章便是我在学习的过程中看到的，质量上乘，便翻译下来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Origin: &lt;a href=&quot;http://the-paper-trail.org/blog/columnar-storage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://the-paper-trail.org/blog/columnar-storage/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://the-paper-trail.org/blog/columnar-storage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://the-paper-trail.org/blog/columnar-storage/&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;译注&quot;&gt;&lt;a href=&quot;#译注&quot; class=&quot;headerlink&quot; title=&quot;译注&quot;&gt;&lt;/a&gt;译注&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You’re going to hear a lot about columnar storage formats in the next few months, as a variety of distributed execution engines are beginning to consider them for their IO efficiency, and the optimisations that they open up for query execution. In this post, I’ll explain why we care so much about IO efficiency and show how columnar storage – which is a simple idea – can drastically improve performance for certain workloads.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;在接下来的几个月里，随着一系列分布式执行引擎们因为它们（在一些特定场景下）带来的高效 IO 特性以及为检索执行带来优化的可能性而开始考虑（引入）它们，列式存储这四个字将会常常出现在你的视野中。在这篇文章中，我将对为何我们对 IO 效率如此关心作出解释，并且将列式存储——其实就是一个很简单的想法——在一些场景下能够显著的提高性能的原理展示给你看。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Caveat: This is a personal, general research summary post, and as usual doesn’t neccessarily reflect our thinking at Cloudera about columnar storage.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;须知：这是一篇仅包含个人观点的普通研究归纳总结文，正如以前的文章一样，并没有反映 Cloudera 对于列式存储的想法。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disks are still the major bottleneck in query execution over large datasets. Even a machine with twelve disks running in parallel (for an aggregate bandwidth of north of 1GB/s) can’t keep all the cores busy; running a query against memory-cached data can get tens of GB/s of throughput. IO bandwidth matters. Therefore, the best thing an engineer can do to improve the performance of disk-based query engines (like RDBMs and Impala) usually is to improve the performance of reading bytes from disk. This can mean decreasing the latency (for small queries where the time to find the data to read might dominate), but most usually this means improving the effective throughput of reads from disk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在大规模数据集的场景下，磁盘依然是检索执行过程中的主要性能瓶颈。就算一台拥有十二块并行运行的硬盘的机器（合起来在北桥的能提供的 IO 带宽有 1GB/s）也不能让所有 CPU 核心保持在繁忙的状态；运行一个内存上数据的检索却可以轻易地带来数十 GB/s 的吞吐量。（磁盘的）IO 带宽实在是性能杀手。因此，一个工程师在优化基于磁盘的 query engine（类似 RDBM 或者 Impala 那样的）的性能时，能做的最好的事情通常就是提高从磁盘读取字节时的性能。这可能就意味着降低延时（对于（结果数据量）小的查询而言，时间主要耗在了从磁盘找到那份需要读取出来的数据，亦即寻道），不过也更可能意味着提高从磁盘读取数据的&lt;strong&gt;&lt;em&gt;有效吞吐量&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The traditional way to improve disk bandwidth has been to wait, and allow disks to get faster. However, disks are not getting faster very quickly (having settled at roughly 100 MB/s, with ~12 disks per server), and SSDs can’t yet achieve the storage density to be directly competitive with HDDs on a per-server basis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提高磁盘带宽的传统方法一直是等待，然后得到更快的磁盘。然而，磁盘变快的速度并非如人愿（已经有一段时间停滞在 100 MB/s 这里了，我是说在一台拥有约 12 块磁盘的机器上），并且，在单台服务器的维度下，SSD 磁盘也暂时还不能在数据存储密度上拥有和 HDD 磁盘直接抗衡的实力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The other way to improve disk performance is to maximise the ratio of ‘useful’ bytes read to total bytes read. The idea is not to read more data than is absolutely necessary to serve a query, so the useful bandwidth realised is increased without actually improving the performance of the IO subsystem. Enter columnar storage, a principle for file format design that aims to do exactly that for query engines that deal with record-based data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一种提高磁盘性能的方法是最大化从磁盘读取出的数据中“有效”数据的占比。这个想法是，不去读取对于一次检索而言多余的那些数据，进而在 IO 子系统实际上并没有性能提升的情况下提高有效带宽。这就引出了列式存储——一种旨在精准地为和数据记录打交道的 query engine 提供这种优化的文件存储格式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Columns-vs-Rows&quot;&gt;&lt;a href=&quot;#Columns-vs-Rows&quot; class=&quot;headerlink&quot; title=&quot;Columns vs. Rows&quot;&gt;&lt;/a&gt;Columns vs. Rows&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;列和行&quot;&gt;&lt;a href=&quot;#列和行&quot; class=&quot;headerlink&quot; title=&quot;列和行&quot;&gt;&lt;/a&gt;列和行&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Traditional database file format store data in rows, where each row is comprised of a contiguous collection of column values. On disk, that looks roughly like the following:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在传统的数据库系统中，数据都被以行的形式存储下来，而每一行都由紧密相连的一列一列的值组成。落地到磁盘上，这些数据大概看起来和下图类似：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/d429b854-3ca8-11e6-a964-6b509b00945d.png&quot; alt=&quot;行式存储在磁盘上的样子&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This row-major layout usually has a header for each row that describes, for example, which columns in the row are NULL. Each column value is then stored contiguously after the header, followed by another row with its own header, and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种一行一行的布局通常都有一个“头”来描述在这一行里哪些列存储的值是 NULL。然后这一行每一列的值再相邻地跟在“头”后面，（这样一行的数据便存储完毕，）接下来便是下一行的数据，依此类推。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both HDDs and SSDs are at their most efficient when reading data sequentially from disk (for HDDs the benefits are particularly pronounced). In fact, even a read of a few bytes usually brings in an entire block of 4096 bytes from disk, because it is effectively the same cost to read (and the operating system usually deals with data in 4k page-sized chunks). For row-major formats it’s therefore most efficient to read entire rows at a time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HDD 和 SSD 都在顺序从磁盘读取数据的时候效率最高（尤其是对于 HDD 来说）。事实上，就算仅仅只是读取几个字节，也会从磁盘上读取一整个 4096 字节大小的区块，这是因为两者读取的效率其实一样（而且操作系统通常以 4 KB 大小的页来处理数据）。因此对以行形式存储的数据来说一次读取一整行是效率最高的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Queries that do full table-scans – i.e. those that don’t take advantage of any kind of indexing and need to visit every row – are common in analytical workloads; with row-major formats a full scan of a table will read every single byte of the table from disk. For certain queries, this is appropriate. Trivially, SELECT * FROM table requires returning every single column of every single row in the table, and so the IO costs for executing that query on a row-major format are a single-seek and a single large contiguous read (although that is likely to be broken up for pipelining purposes). The read is unavoidable, as is the single seek; therefore row-major formats allow for optimal IO usage. More generally, SELECT \&lt;col\_set\&gt; FROM table WHERE \&lt;predicate\_set\&gt; will be relatively efficient for row-major formats if either a) evaluating the predicate_set requires reading a large subset of the set of columns or b) col_set is a large subset of the set of columns (i.e. the projectivity is high) and the set of rows returned by the evaluation of the predicates over the table is a large proportion of the total set of rows (i.e. the selectivity is high). More simply, a query is going to be efficient if it requires reading most of the columns of most of the rows. In these cases, row-major formats allow the query execution engine to achieve good IO efficiency.&lt;/predicate\_set\&gt;&lt;/col\_set\&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在分析的工作中，那些对整张表，亦即那些没有利用任何形式的索引从而需要访问每一行数据的查询是很常见的；在以行为主的存储形式下，一次全检索将会从磁盘中把目标表的所有数据都读取出来。对于特定的一些查询来说，这样是没有问题的。特别地，例如，SELECT * FROM 一张表的查询语句需要这张表里面的每一行数据，因此在行式存储的情况下执行那次查询的 IO 操作就是一次在磁盘上的连续的单次寻道、读取过程（尽管这些操作有可能会被把数据导向管道的目的打断）。正因只需要一次寻道，这种读取过程是不可避免的；因而基于行的存储形式便让最优的 IO 操作成为可能。又如，一些更常见的检索——“SELECT \&lt;col\_set\&gt; FROM table WHERE \&lt;predicate\_set\&gt;”，如果达到 a) 执行&amp;lt;筛选条件&amp;gt;时需要读取所有列里面的大多数，或者 b) &amp;lt;某些列&amp;gt; 包含了所有列里面的大多数（亦即，projectivity 较高）并且执行检索后返回的行囊括了所有行的大多数的时候（亦即，selectivity 较高）这两个条件的其中之一时，在行式存储下效率会比较高。简而言之，（在行形式的存储下）一个检索如果需要读取大部分的数据时，效率会比较高。在这些例子里，行形式的存储让检索执行引擎获得了更高的 IO 效率。&lt;/predicate\_set\&gt;&lt;/col\_set\&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, there is a general consensus that these SELECT * kinds of queries are not representative of typical analytical workloads; instead either a large number of columns are not projected, or they are projected only for a small subset of rows where only a few columns are required to decide which rows to return. Coupled with a general trend towards very wide tables with high column counts, the total number of bytes that are required to satisfy a query are often a relatively small fraction of the size on disk of the target table. In these cases, row-major formats often are quite wasteful in the amount of IO they require to execute a query.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，有一种主流的观点认为，这些类似 SELECT * 的检索在典型的分析任务的场景下并不具备代表性；取而代之的是（在分析任务的场景下）检索只映射很小一部分的列，或者只有一小部分的行、列决定了哪些行被返回。再考虑到表正在变的行和列都很多的趋势，（我们可以发现）满足一个检索的数据量经常是目标表在磁盘上总数据的很小的一部分。在这些场景下，行式存储便因为执行检索时过度的 IO 操作而显得很浪费。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of a format that makes it efficient to read entire rows, it’s advantageous for analytical workloads to make it efficient to read entire columns at once. Based on our understanding of what makes disks efficient, we can see that the obvious approach is to store columns values densely and contiguously on disk. This is the basic idea behind columnar file formats. The following diagram shows what this looks like on disk:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与其用一种针对读取全部行效率较高的存储方式，对于分析工作而言，不如用一种针对读取全部列效率较高的存储方式来的要好。基于对什么让磁盘读取效率高的理解，我们可以看到，将列上的值直接紧密地存储在磁盘上是一种最直接的解决方法。这就是列式存储背后的基本思想。下面的这幅图展示了列式存储在磁盘上看起来的样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/dcdd9dc6-3ca8-11e6-a2bb-83da029513d1.png&quot; alt=&quot;列式存储在磁盘上的样子&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A row is split across several column blocks, which may even be separate files on disk. Reading an entire column now requires a single seek plus a large contiguous read, but the read length is much less than for extracting a single column from a row-major format. In this figure we have organised the columns so that they are all ordered in the same way; later we’ll see how we can relax that restriction and use different orderings to make different queries more efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一行被切分开来并分布于几个“列块”，甚至会分布于磁盘上不相干的两个文件上。读取一整列的数据现在只需要一次寻道并加上一次大量的、连续的读操作，但读取的长度比从行形式存储的数据中获取到目标列的读取长度要少上很多。在上面的图中那些列（按照一定的规则）已经组织好了，所以它们都以相同的形式排列着；后面我们还会讲到通过放松限制并且使用不同的排序方式，可以让不同类型的检索变的高效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Query-Execution&quot;&gt;&lt;a href=&quot;#Query-Execution&quot; class=&quot;headerlink&quot; title=&quot;Query Execution&quot;&gt;&lt;/a&gt;Query Execution&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;检索执行&quot;&gt;&lt;a href=&quot;#检索执行&quot; class=&quot;headerlink&quot; title=&quot;检索执行&quot;&gt;&lt;/a&gt;检索执行&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The diagram below shows what a simple query plan for SELECT col_b FROM table WHERE col_a &amp;gt; 5 might look like for a query engine reading from a traditional row-major file format. A scan node reads every row in turn from disk, and streams the rows to a predicate evaluation node, which looks at the value of col_a in each row. Those rows that pass the predicate are sent to a projection node which constructs result tuples containing col_b.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下的图展示了，在基于传统的行式存储的情况下，一个 query engine 是怎样为类似于“SELECT col_b FROM table WHERE col_a &amp;gt; 5”这样的检索的建立 query plan 的。一个 scan node 依次读取磁盘上的每一行数据，然后将每一行的数据以流的方式交给 predicate evaluation node，后者则会检查一下每行中列 col_a 的值。那些经过筛选条件检测的行则会被送往一个创建包含 col_b 的结果元组的 projection node 那边。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/e555a8b8-3ca8-11e6-98c4-cb06ae9deb10.png&quot; alt=&quot;行式存储上检索的执行计划&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compare that to the query plan below, for a query engine reading from columnar storage. Each column referenced in the query is read independently. The predicate is evaluated over col_a to produce a list of matching row IDs. col_b is then scanned with respect to that list of IDs, and each matching value is returned as a query result. This query plan performs two IO seeks (to find the beginning of both column files), instead of one, and issues two consecutive reads rather than one large read. The pattern of using IDs for each column value is very common to make reconstructing rows easier; usually columns are all sorted on the same key so the Nth value of col_a belongs to the same row as the Nth value of col_b.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们把刚才的 query plan 来和下面的这个——基于列式存储的——比较一下。在检索中所引用到的每一列都被独立地读取。在 col_a 上的筛选条件被 predicate eval 阶段处理后产出一系列满足条件的列 ID。然后每个满足这些列 ID 的 col_b 则会被当做结果返回。这个检索执行计划进行了两次 IO 寻道（这是为了找到两个列存储文件的起始磁道），而非（之前那个的）一次，并且进行了两次连续的（小数据量的）读取，而非一次大数据量的读取。在每个列的值上标记 ID 的模式是一种更方便地重建行常见手段；通常列上的值都以相同的排序方式来存储，这样一来 col_a 列上存储的第 N 个值同一行的 col_b 列的值也是 col_b 列上存储的第 N 个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/ed784028-3ca8-11e6-a82a-e3c47f92c8bd.png&quot; alt=&quot;列式存储上检索的执行计划&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The extra IO cost for the row-format query is therefore the time it takes to read all those extra columns. Let’s assume the table is 10 columns wide, ten million rows long and each value is 4 bytes, which are all conservative estimates. Then there is an extra 8 &lt;em&gt; 1M &lt;/em&gt; 4 bytes, or 32MB of extra data read, which is ~3.20s on a query that would likely otherwise take 800ms; an overhead of 300%. When disks are less performant, or column widths wider, the effect becomes exaggerated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从上面的介绍我们可以发现，行式存储的场景下，读取那些额外列的行为便是那些（在分析任务的场景不应该有的）额外的 IO 代价。我们可以保守地假设有一张 10 列、1 千万行、每个数值有 4 bytes 的表。（这种情况下检索该表某列的全部数据时，）就会有额外的 8 &lt;em&gt; 1000000 &lt;/em&gt; 4 bytes，或者说 32 MB 的额外数据需要读取——这将导致一个 800 ms 就可以执行完的检索最后会花上 3.2 s；接近三倍的额外性能损耗。进一步地，当磁盘性能不佳，或者表更宽时，这种负面影响会坏到夸张。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This, then, is the basic idea of columnar storage: we recognise that analytical workloads rarely require full scans of all table data, but do often require full scans of a small subset of the columns, and so we arrange to make column scans cheap at the expense of extra cost reading individual rows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就又引出了列式存储的基本思想：我们认识到了在分析工作的场景下几乎很少需要获取一张表的全列数据，而是常常只读取一小部分列的数据，所以我们牺牲了读取整行数据的效率，变通为了让列的读取变得简单高效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;The-Cost-of-Columnar&quot;&gt;&lt;a href=&quot;#The-Cost-of-Columnar&quot; class=&quot;headerlink&quot; title=&quot;The Cost of Columnar&quot;&gt;&lt;/a&gt;The Cost of Columnar&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;行式存储的效率问题&quot;&gt;&lt;a href=&quot;#行式存储的效率问题&quot; class=&quot;headerlink&quot; title=&quot;行式存储的效率问题&quot;&gt;&lt;/a&gt;行式存储的效率问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Is this a free lunch? Should every analytical database go out and change every file format to be column-major? Obviously the story is more complicated than that. There are some query archetypes that suffer when data is stored in a columnar format.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;列式存储是一次“免费的午餐”吗？是否每一个用于分析工作的数据库都应该把每一个存储文件变为列式的？显然这些问题并不那么好回答。实际上，存在一些检索，在列式存储的情况下表现不佳。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The obvious drawback is that it is expensive to reassemble a row, since the separate values that comprise it are spread far across the disk. Every column included in a projection implies an extra disk seek, and this can add up when the projectivity of a query is high. Therefore, for highly projective queries, row-major formats can be more efficient (and therefore columnar formats are not strictly better than row-major storage even from a pure IO perspective).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个显而易见的缺点是，（利用列的值）重新组成一行的代价很大，这是因为构成某行的列的值是分布在磁盘的不同的地方的。映射（projection）中包含的每一列都预示着一次额外的磁盘寻道，而且这个代价还会在检索的映射率（projectivity）很高时变得更大。因此，对于映射率很高的检索，行式存储的效率会更高（所以列式存储在纯粹的 IO 角度下来看，也并不是一定比行式存储要优秀）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are more subtle repercussions of each row being scattered across the disk. When a row-major format is read into memory, and ultimately into CPU cache, it is in a format that permits cheap reference to multiple columns at a time. Row-major formats have good in-memory spatial locality, and there are common operations that benefit enormously from this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有更多的因行被分散到磁盘的各个地方而引起的问题。当行式存储的数据被读入内存，直至最终读入 CPU 缓存时，CPU 获取一次同时获取多行数据是很方便的。行式存储拥有较好的空间本地性（spatial locality），而且有一些常见的操作因它获利。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, a query that selects the sum of two columns can sometimes be executed (once the data is in memory) faster on row-major formats, since the columns are almost always in the same cache line for each row. Columnar representations are less well suited; each column must be brought into memory at the same time and moved through in lockstep (yet this is still not cache efficient if each column is ordered differently), or the initial column must be scanned, each value buffered and then the second column scanned separately to complete the half-finished output tuple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举个例子，因为在行式存储下，同行两列总是同时存在于同一块缓存行中，所以计算这两列综合的检索语句执行起来（一旦数据已经读取入内存）会更快。而列式存储则相对地不适合这个场景；（在列式存储的形式下）每一列都必须同时加载进内存并且在之上同步地偏移、读取（然而如果每一列的数据按照不同的方式排序的话，这种情况下还不是做不到缓存友好），或者先扫描第一个列，并缓存它的每一个数值，然后将第二行的数据扫描进内存来补完那完成了一半的结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The same general problem arises when preparing each tuple to write out as a result of (non-aggregating) query. Selecting several columns at once requires ‘row reconstruction’ at some point in the query lifecycle. Deciding when to do this is a complicated process, and (as we shall see) the literature has not yet developed a good rule of thumb. Many databases are row-major internally, and therefore a columnar format is transposed into a row-major one relatively early in the scanning process. As described above, this can require buffering half-constructed tuples in memory. For this reason, columnar formats are often partiioned into ‘row-groups’; each column chunk N contains rows (K&lt;em&gt;N) to ((K+1) &lt;/em&gt; N). This reduces the amount of buffering required, at the cost of a few more disk seeks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个（在使用列式存储时）比较常见的问题发生在准备将每一个元组作为（非聚合式的）检索的结果写出时。SELECT 几列的检索在被执行的生命周期内的某一个时间点时需要进行“row reconstruction”的处理。决定何时进行这一步是一个复杂的过程，而且（正如我们将要看到的一样）学术界（存疑，原文为 the literature）页还并没有探索出优秀的办法。许多数据库在内部实现时采用的是行式存储，因此列式存储的数据在早期的数据扫描过程中就会被转变成行式的。真如之前描述的那样，这就可能会需要在内存中缓存构建了一般的结果元组。因为这些原因，列式存储的数据经常会被分区为“row-groups”；每一个分区块会包含第 (K&lt;em&gt;N) 到 ((K+1) &lt;/em&gt; N) 行的数据。这种做法通过增加一定的磁盘寻道次数来减少了需要缓存的数据量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Further-Aspects-of-Columnar-Storage&quot;&gt;&lt;a href=&quot;#Further-Aspects-of-Columnar-Storage&quot; class=&quot;headerlink&quot; title=&quot;Further Aspects of Columnar Storage&quot;&gt;&lt;/a&gt;Further Aspects of Columnar Storage&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;列式存储进阶考&quot;&gt;&lt;a href=&quot;#列式存储进阶考&quot; class=&quot;headerlink&quot; title=&quot;列式存储进阶考&quot;&gt;&lt;/a&gt;列式存储进阶考&lt;/h3&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;Fully-column-oriented-execution-engines&quot;&gt;&lt;a href=&quot;#Fully-column-oriented-execution-engines&quot; class=&quot;headerlink&quot; title=&quot;Fully column-oriented execution engines&quot;&gt;&lt;/a&gt;Fully column-oriented execution engines&lt;/h4&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;面向列式存储的执行引擎&quot;&gt;&lt;a href=&quot;#面向列式存储的执行引擎&quot; class=&quot;headerlink&quot; title=&quot;面向列式存储的执行引擎&quot;&gt;&lt;/a&gt;面向列式存储的执行引擎&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Relevant papers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://people.csail.mit.edu/tdanford/6830papers/stonebraker-cstore.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C-Store: A Column-oriented DBMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vldb.org/pvldb/vol5/p1790_andrewlamb_vldb2012.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Vertica Analytic Database: C-Store 7 Years Later&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db.lcs.mit.edu/projects/cstore/abadiicde2007.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Materialization Strategies in a Column-Oriented DBMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db.csail.mit.edu/projects/cstore/VLDB06.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Performance Tradeoffs in Read-Optimized Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db.csail.mit.edu/projects/cstore/abadi-sigmod08.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Column-Stores vs. Row-Stores: How Different Are They Really?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关文献：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://people.csail.mit.edu/tdanford/6830papers/stonebraker-cstore.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C-Store: A Column-oriented DBMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vldb.org/pvldb/vol5/p1790_andrewlamb_vldb2012.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Vertica Analytic Database: C-Store 7 Years Later&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db.lcs.mit.edu/projects/cstore/abadiicde2007.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Materialization Strategies in a Column-Oriented DBMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db.csail.mit.edu/projects/cstore/VLDB06.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Performance Tradeoffs in Read-Optimized Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://db.csail.mit.edu/projects/cstore/abadi-sigmod08.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Column-Stores vs. Row-Stores: How Different Are They Really?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;In this post, I’ve talked mostly about the benefits of columnar storage for scans – query operators that read data from disk, but whose ultimate output is a batch of rows for the rest of the query plan to operate on. In fact, columnar data can be integrated into pretty much every operator in a query execution engine. C-Store, the research project precursor to Vertica, explored a lot of the consequences of keeping data in columns until later on in the query plan. Eventually, of course, the columns have to be converted to rows, since the user expects a result in row-major format. The choice of when to perform this conversion is called late or early materialisation; viewed this way column-stores and row-stores can be considered two points on a spectrum of early to late materialisation strategies. Materialisation is studied in detail in the materialisation strategies paper above. Their conclusions are that the correct time to construct a tuple depends on the query plan (two broad patterns are considered: pipelining and parallel scans) and the query selectivity. Unfortunately, supporting both strategies would involve significant implementation cost – each operator would have to support two interfaces, and two parallel execution engines would effectively be frankensteined together. In general, late materialisation can lead to significant advantages: for example, by delaying the cost of reconstructing a tuple, it can be avoided if the tuple is ultimately filtered out by a predicate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这篇文章中，我大篇幅地介绍了列式存储给 scan 操作——那些从磁盘读取数据，但最终输出是一系列将交由 query plan 剩下的操作使用的一行行数据的操作——所带来的好处。实际上，列式存储是可以集成进一个 query execution engine 的几乎每一步的处理中去的。C-Store，Vertica 的前身研究项目，探索了许多在 query plan 的后期处理过程中仍然保持列式存储格式的数据的后续影响。当然，最终这些列式的数据还是会被转成行式的，这是因为用户是期待一个行式的结果的。基于何时进行这个转换，它被相应地被称为 late materialisation 或 early materialisation；从这方面看来，行式存储和列式存储可以被认为是 early materialisation 和 late materialisation 这两个相对的策略的两种极端。Materialisation 在上面列出的和它相关的文献中有详细介绍。他们的结论是，构建元组的正确时间点取决于 query plan（两种模式被考虑：pipelining scan 和 parallel scan） 和 query selectivity。不幸的是，同时支持两种策略会导致实现上的代价——每一个（query plan 中的）operator 都不得不支持两种接口，而且两个并行执行引擎也得被用各种奇淫巧计高效地组合在一起。通常，late materialisation 会带来明显的优势：例如，通过延迟重建元组的工作，这一步可以在这个元组被 predicate 过滤掉时抛弃掉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference between row-based and columnar execution engines is studied in the Performance Tradeoffs… and Column-Stores vs. Row-Stores… papers. The former takes a detailed look at when each strategy is superior – coming out in favour mostly of column-stores, but only with simple queries and basic query plans. The latter tries to implement common column-store optimisations in a traditional row-store, without changing the code. This means a number of increasingly brittle hacks to emulate columnar storage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基于列式的 execution engine 与基于行式的之间的区别在性能取舍以及关于行式存储、列式存储的文献上有相应研究。前者详细地考察了何时哪个策略更好——得出来的结果大体上偏向于列式存储，但仅仅是在简单查询和基本的 query plan 的情况下。后者则尝试在不更改代码的前提下，去实现在传统的行式存储的基础上做出一些列式存储的优化。这意味着运用一系列增加系统碎片化的 hack 来模拟列式存储。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;Compression&quot;&gt;&lt;a href=&quot;#Compression&quot; class=&quot;headerlink&quot; title=&quot;Compression&quot;&gt;&lt;/a&gt;Compression&lt;/h4&gt;&lt;p&gt;Relevant papers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://db.lcs.mit.edu/projects/cstore/abadisigmod06.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Integrating Compression and Execution on Column-Oriented Database Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;压缩&quot;&gt;&lt;a href=&quot;#压缩&quot; class=&quot;headerlink&quot; title=&quot;压缩&quot;&gt;&lt;/a&gt;压缩&lt;/h4&gt;&lt;p&gt;相关文献：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://db.lcs.mit.edu/projects/cstore/abadisigmod06.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Integrating Compression and Execution on Column-Oriented Database Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;A column of values drawn from the same set (like item price, say) is likely to be highly amenable to compression since the values contained are similar, and often identical. Compressing a column has at least two significant advantages on IO cost: less space is required on disk, and less IO required to bring a column into memory (at the cost of some CPU to decompress which is usually going spare). Some compression formats – for example run-length encoding – allow execution engines to operate on the compressed data directly, filtering large chunks at a time without first decompressing them. This is another advantage of late materialisation – by keeping the data compressed until late in the query plan, these optimisations become available to many operators, not just the scan.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从同一个集合（例如价格）内获得的一列的值往往很可能是高度可压缩的，这是因为这些值都很类似，甚至常常是相等的。压缩一列的数据至少有两个对 IO 而言显而易见的优势：在磁盘上占用更少的空间，以及将一列数据读入内存时需要更少的 IO（以占用一些通常是闲置状态的 CPU 做解压缩的工作为代价）。有一些压缩格式——例如游程编码（run-length encoding）——能够让 execution engine 直接操作压缩后的数据，从而可以在没有线解压缩它们的情况下一次性过滤掉大量的数据。这是另外一个 late materialisation 带来的好处——通过在 query plan 的早期几步工作中一直让数据处于压缩状态，这些优化变得能够让许多 operator 利用，而不仅仅是 scan。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;Hybrid-approaches&quot;&gt;&lt;a href=&quot;#Hybrid-approaches&quot; class=&quot;headerlink&quot; title=&quot;Hybrid approaches&quot;&gt;&lt;/a&gt;Hybrid approaches&lt;/h4&gt;&lt;p&gt;Relevant papers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vldb.org/conf/2001/P169.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weaving Relations for Cache Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;两者混用&quot;&gt;&lt;a href=&quot;#两者混用&quot; class=&quot;headerlink&quot; title=&quot;两者混用&quot;&gt;&lt;/a&gt;两者混用&lt;/h4&gt;&lt;p&gt;相关文献：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vldb.org/conf/2001/P169.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weaving Relations for Cache Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Since neither row-major nor column-major is strictly superior on every workload, it’s natural that some research has been done into hybrid approaches that can achieve the best of both worlds. The most commonly known approach is PAX – Partition Attributes Across – which splits the table into page-sized groups of rows, and inside those groups formats the rows in column-major order. This is the same approach as the row-groups used to prevent excessive buffering described earlier, but this is not the aim of PAX; with PAX the original intention was to make CPU processing more efficient by having individual columns available contiguously to perform filtering, but also to have all the columns for a particular row nearby inside a group to make tuple reconstruction cheaper. The result of this approach is that IO costs don’t go down (because each row-group is only a page long, and is therefore read in its entirety), but reconstruction and filtering is cheaper than for true columnar formats.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然列式存储和行式存储在每种场景下并不是都能由于对方，自然而然就有一些想利用两者优点的混合方案相关的研究。最常见的一种方案是 PAX——Partition Attributes Across——这种方案将表分成了以页的大小来划分的行组成的组，而在这些组里面数据则会以列的方式组织。这和之前说过的用于提高缓存使用效率的以行组织数据的方案相同，但提高缓存使用效率并不是 PAX 的目标；PAX 的初始目标是为了让 CPU 能够因一列的数据都（在 CPU 缓存中）可以便利地获取到而高效的去过滤数据，但同时每一行的所有列也同时在一个组里，进而可以高效地去重建元组。这个解决方案的结果是 IO 的代价并没有减少（因为没有一个组只有一个页面的长度，并且因而要一整个地读取），但重建和过滤的过程相较纯列式存储的方案而言代价更小。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;最近一段时间，我主要在构建公司的数据决策系统。依照规划，公司内部打算在 Hadoop 集群上借助 Impala 来实现一个近实时化的 SQL 执行环境，让它来提供数据查询接口给前端报表系统。这套系统的基础思想来自 Google 于 2010 年发表的一篇 paper：&lt;a href=&quot;http://research.google.com/pubs/pub36632.html&quot;&gt;Dremel - Interactive Analysis of Web-Scale Datasets&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要降低查询的延时，涉及到了一系列的优化手段，其中列式存储的方案便是其一。这篇文章便是我在学习的过程中看到的，质量上乘，便翻译下来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Origin: &lt;a href=&quot;http://the-paper-trail.org/blog/columnar-storage/&quot;&gt;http://the-paper-trail.org/blog/columnar-storage/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://the-paper-trail.org/blog/columnar-storage/&quot;&gt;http://the-paper-trail.org/blog/columnar-storage/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>让我们来谈谈 @property</title>
    <link href="http://bachiscoding.com/2014/12/27/let-us-talk-about-objc-properties/"/>
    <id>http://bachiscoding.com/2014/12/27/let-us-talk-about-objc-properties/</id>
    <published>2014-12-27T06:56:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;写了一些 iOS 平台上的代码后，我发现自己对于 @property 这个 Objective-C 中很重要、最经常使用的特性不是很熟悉，而这也影响到了我的开发质量。特别是，@property 存在许多选项，nonatomic、weak、assign、copy 等等一系列配置，我弄了很久还是不能分辨清楚，看到开源项目中的用法也会搞不清楚原由，更别提合理地使用。所以我决定好好地研究一下这个问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;property-是-Objective-C-对封装的实现&quot;&gt;&lt;a href=&quot;#property-是-Objective-C-对封装的实现&quot; class=&quot;headerlink&quot; title=&quot;@property 是 Objective-C 对封装的实现&quot;&gt;&lt;/a&gt;@property 是 Objective-C 对封装的实现&lt;/h2&gt;&lt;p&gt;我们常常听人说，面向对象的方法论有&lt;a href=&quot;http://codebetter.com/raymondlewallen/2005/07/19/4-major-principles-of-object-oriented-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;四个原则&lt;/a&gt;：封装、抽象、继承以及多态，这其中的“封装”的意思是，内部数据变更的实现细节不要暴露给客户代码，而是提供&lt;strong&gt;稳定一致&lt;/strong&gt;的 API 来使其和自己交互——这样一来就可以在内部实现变更的情况下最大程度的保证客户代码不会出现版本兼容问题。也就是说，封装的意义是指，当一个对象内部定义持有数据成员，而客户代码需要和这些数据成员来进行交互时，原则上我们不能让外界直接和它交互，而应该提供&lt;strong&gt;我们可控的&lt;/strong&gt;外界与其交互的接口方法。简而言之，&lt;strong&gt;我们用方法来封装数据，从而达到控制的目的&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is encapsulation? Well, in a nutshell, encapsulation is the&lt;br&gt;hiding of data implementation by restricting access to accessors and&lt;br&gt;mutators.&lt;/p&gt;
&lt;p&gt;摘自 &lt;a href=&quot;http://codebetter.com/raymondlewallen/2005/07/19/4-major-principles-of-object-oriented-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4 major principles of Object-Oriented Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation is the packing of data and functions into a single component&lt;/strong&gt;. The features of encapsulation are supported using classes in most object-oriented programming languages, although other alternatives also exist. It allows selective hiding of properties and methods in an object by building an impenetrable wall to protect the code from accidental corruption.&lt;/p&gt;
&lt;p&gt;In programming languages, encapsulation is used to refer to one of two related but distinct notions, and sometimes to the combination thereof:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A language mechanism for restricting access to some of the object’s components.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A language construct that facilitates the bundling of data with the methods (or other functions) operating on that data.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;摘自 &lt;a href=&quot;http://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming\&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“我们可控的”的意思是，在这些控制数据成员获取、修改的方法中我们可以根据自己的需要加入其他控制相关的代码——例如提供&lt;a href=&quot;http://preshing.com/20130618/atomic-vs-non-atomic-operations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原子操作&lt;/a&gt;的线程锁——这样一来我们就可以在客户代码无感知的情况下做更多的和数据成员相关的事情。下面举几个例子，可以更好地阐释何为封装。&lt;/p&gt;
&lt;p&gt;Java 中经常被使用的 getter、setter 模式是一种封装的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fridge&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cheese;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setCheese&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _cheese)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         cheese = _cheese;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCheese&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cheese;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 中的 @property 装饰器是一种封装的实现（代码取自我正在开发中的 &lt;a href=&quot;https://github.com/Winiex/pyalgor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyalgor&lt;/a&gt; 项目，TNode 实现了一个普适的树节点）：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key, value, height,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 parent, children=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._value = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._parent = parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._height = height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; children &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self._children = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self._children = children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self._key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @key.setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._key = key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self._value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @value.setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, value)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._value = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self._height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @height.setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, height)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._height = height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self._parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @parent.setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, parent)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._parent = parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self._children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;children_len&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 一个数据成员不一定是对象的成员变量，还可以是某个实时计算值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; len(self._children)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽管 Python 中并没有真正意义的拥有 private、protected 级别 accessibility 的属性，但是把它作为一种 convention 来看待的话，@property 就是一种数据的封装机制。更巧的是，Python 中的 @property 和 Objective-C 中的 @property 的名字是一样的。&lt;/p&gt;
&lt;p&gt;在面向对象的理论中，对数据属性进行封装的方法分为&lt;a href=&quot;http://en.wikipedia.org/wiki/Mutator_method&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;两种&lt;/a&gt;：一种是获取数据元素值的 Accessor，一种是修改数据元素值 Mutator。在上面的两个例子中，Java 中 get 开头的方法、Python 中 @property 装饰的方法是 Accessor，Java 中 set 开头的方法、Python 中 @属性名.setter 装饰的方法是 Mutator。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@property 就是 Objective-C 提供的封装机制的实现&lt;/strong&gt;——它让我们可以方便地控制对象中的数据成员与客户代码交互的过程，并且通过一些配置简化掉了许多重复的工作。&lt;/p&gt;
&lt;p&gt;Apple 的&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;对 @property 的介绍是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Objects often have properties intended for public access.&lt;/p&gt;
&lt;p&gt;Objective-C properties offer a way to define the information that a class is intended to encapsulate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何使用-property&quot;&gt;&lt;a href=&quot;#如何使用-property&quot; class=&quot;headerlink&quot; title=&quot;如何使用 @property&quot;&gt;&lt;/a&gt;如何使用 @property&lt;/h2&gt;&lt;p&gt;接下来谈谈如何使用 @property。我们先从最基本的操作来谈起，然后再谈谈配制 @property。&lt;/p&gt;
&lt;h3 id=&quot;声明、赋值、获取&quot;&gt;&lt;a href=&quot;#声明、赋值、获取&quot; class=&quot;headerlink&quot; title=&quot;声明、赋值、获取&quot;&gt;&lt;/a&gt;声明、赋值、获取&lt;/h3&gt;&lt;p&gt;一个最简单的 @property 的使用的例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 @property 这一行代码，我们就在 MyObject 中声明了一个新属性，或者说新的 property。&lt;strong&gt;一个 property 等于数据成员、Mutator、Accessor 的和。通过定制各个组成部分，property 可以表现出不同的行为特征。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在默认情况下，上面的代码会导致编译器在 MyObject 中添加 setMyString: 和 myString 方法，并且自动地在 MyObject 的实例中添加一个 NSString 类型的实例变量 _myString。_myString 就是数据成员，setMyString: 是 _myString 的 Mutator，myString 是 _myString 的 Accessor。&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/4f1e4cba-3ca8-11e6-b7fc-0f2f3346806e.jpg&quot; class=&quot;center&quot; width=&quot;900&quot;&gt;
&lt;p&gt;在 Apple 官方文档的 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Encapsulating Data&lt;/a&gt; 一章中，这种类型的 property 被称之为 “instance variable backed property”，它的意思是说，这种类型的 property 的背后是有一个实例变量在保存它的值的。&lt;/p&gt;
&lt;p&gt;一旦定义好了一个 property 后，我们就可以用如下方式来赋值、获取一个对象上的 property：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MyObject *object = [[MyObject alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用 Mutator 方法给 property 赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[object setMyString:&lt;span class=&quot;string&quot;&gt;@&quot;Hello Property&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用 Accessor 获取 property 的值并打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, [object myString]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Objective-C 演化到 2.0 版本后，dot-notation 被添加到了 @property 的语法当中，所以我们可以用下面的这种方式来赋值、获取了：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MyObject *object = [[MyObject alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用“.”操作符给 property 赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;object.myString = &lt;span class=&quot;string&quot;&gt;@&quot;Hello Property&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 直接用“.”操作符来获取 property 的值并打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, object.myString);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Apple 给出的文档中，对 dot-notation 的介绍是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dot syntax is purely a convenient wrapper around accessor method calls&lt;/strong&gt;. When you use dot syntax, the property is still accessed or changed using the getter and setter methods mentioned above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting a value using somePerson.firstName is the same as using [somePerson firstName]&lt;/li&gt;
&lt;li&gt;Setting a value using somePerson.firstName = @”Johnny” is the same as using [somePerson setFirstName:@”Johnny”]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that property access via dot syntax is also controlled by the property attributes. If a property is marked readonly, you’ll get a compiler error if you try to set it using dot syntax.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这意味着，dot-notation 本质上就和 &lt;a href=&quot;http://stackoverflow.com/questions/11408427/how-does-the-string-class-override-the-operator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java 中 String 类支持“+”操作符&lt;/a&gt;一样，是一个&lt;a href=&quot;http://en.wikipedia.org/wiki/Syntactic_sugar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;语法糖&lt;/a&gt;。本质上你还是在使用 Accessor 和 Mutator 来和数据成员在做交互。&lt;/p&gt;
&lt;p&gt;我在使用 dot-notation 的过程中，有时候会发现如果连续地使用“.”操作符来赋值的话，编译器会报错。后来我发现第一个“.”是 dot-notation，第二个点是 struct 的“.”操作符，最后因为编译器的转化，整个语句就会报错了——这一点确实很让人迷惑:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; myPoint;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyObject *obj = [[MyObject alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 在这一行编译器会报错：“Expression is not assignable”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj.myPoint.x = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要想不让上面的代码报错，而又达到我们的目的的话，main.m 中的代码就只能这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyObject *obj = [[MyObject alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; objPoint = obj.myPoint;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        objPoint.x = &lt;span class=&quot;number&quot;&gt;2.33333&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj.myPoint = objPoint;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;互联网上对于 dot-notation 的优缺点也存在着非常多的讨论（&lt;a href=&quot;http://qualitycoding.org/dot-notation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/questions/11474284/what-is-preferred-in-objective-c-dot-notation-or-square-bracket-notation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二&lt;/a&gt;、&lt;a href=&quot;http://www.learn-cocos2d.com/2012/06/crazy-objectivec-dot-notation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;虽然 dot-notation 存在一些缺点，但是包括 &lt;a href=&quot;https://github.com/NYTimes/objective-c-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NYTimes Objective-C Style Guide&lt;/a&gt; 在内，大部分规范都是推荐使用它来和数据成员进行交互的——这样一来&lt;a href=&quot;https://github.com/NYTimes/objective-c-style-guide#dot-notation-syntax&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码在表意上会更清晰&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;定制-property&quot;&gt;&lt;a href=&quot;#定制-property&quot; class=&quot;headerlink&quot; title=&quot;定制 @property&quot;&gt;&lt;/a&gt;定制 @property&lt;/h3&gt;&lt;p&gt;方才的 @property 声明语句定义的 property 是拥有默认行为的 property。根据一定的特殊需求，我们可以对 @property 声明进行定制，进而控制 property 本身的行为——这些定制主要都发生在 Mutator、Accessor 上。一个例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的声明语句中，我们多加了一个 (readonly) 来讲 myString 定制为只读的属性。这样一来，编译器就只会给 myString 属性生成 Accessor，而不会生成 Mutator：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/56b96aae-3ca8-11e6-a2b1-cb1b6e617f18.jpg&quot; class=&quot;center&quot; width=&quot;900&quot;&gt;
&lt;p&gt;因此，当客户代码想要设置 myString 的值时，就会因为没有 setMyString: 方法而无法实现。要设置 myString 的值则可以在 MyObject 上定义一个修改 myString 的 backing instance variable，也就是 _myString，的方法然后将该方法暴露出去，这相当于我们自己手动实现了 Mutator：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setMyString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setMyString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _myString = myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然这样做的话，是违背了 readonly 的设计初衷的，举这个例子是为了辅助理解 @property，请不要这样做。&lt;/p&gt;
&lt;p&gt;###@property 语句还有其他选项&lt;/p&gt;
&lt;p&gt;类似于 readonly 这样的定制 @property 声明的选项一共有八个，它们形成了四对相反的选项，分别是 nonatomic 与 atomic、readwrite 与 readonly、copy 与 assign、strong（retain）与 weak 等。刚开始写 Objective-C 代码的时候，因为对于这些选项并不是很清楚，我犯了挺多的错误。下面我们来进一步地一次介绍这些选项的作用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nonatomic 与 atomic。这两个属性控制了数据成员的交互的原子性（&lt;a href=&quot;http://en.wikipedia.org/wiki/Linearizability&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一&lt;/a&gt;、&lt;a href=&quot;http://www.parallellabs.com/2010/04/15/atomic-operation-in-multithreaded-application/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二&lt;/a&gt;）。这里所谓的&lt;strong&gt;原子性是指，当数据成员处在多线程的环境之下时，在每一个时间点有且只有一个线程在和数据成员进行交互&lt;/strong&gt;，它和&lt;a href=&quot;http://en.wikipedia.org/wiki/Thread_safety&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线程安全&lt;/a&gt;的概念并不是等同的，这是因为线程安全的要求更高——它不仅仅要求单个数据成员拥有交互的原子性，还进一步地要求各个数据成员组合在一起并暴露在多线程的环境下时在任何时间点不会出错。原子性的操作是不可再分的，所以进一步是线程互斥的。如果声明为 nonatomic，则该 property 的数据成员的交互不是原子性的，在同一时间允许多个线程对数据成员进行赋值、获取。如果声明为 atomic 的话，则该 property 的数据成员的交互时原子性的，在同一时间只允许同一个线程来执行赋值、获取。声明为 atomic 的话，有时会导致多线程访问数据成员的停等，效率不高，所以在实际工程项目中，如果特殊要求，一般都会将能声明为 nonatomic 的 property 声明为 nonatomic。我并没有深入地探索编译器是如何实现这个配置的，但我&lt;strong&gt;猜测&lt;/strong&gt;它应该是在数据成员的 Accessor、Mutator 方法中加入了线程锁。&lt;/li&gt;
&lt;li&gt;readwrite 与 readonly。这两个属性决定了数据成员可访问性——是只读的还是可读可写的（很奇怪的是并没有 writeonly 这个选项，你只能&lt;a href=&quot;http://stackoverflow.com/questions/4266197/write-only-property-in-objective-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这样&lt;/a&gt;实现）。声明为 readwrite 的话，数据成员是可读可写的，这个时候编译器会同时生成 Accessor 和 Mutator。声明为 readonly 的话数据成员就是只读的，这个时候编译器只会生成 Accessor。&lt;/li&gt;
&lt;li&gt;copy 与 assign。这两个属性控制了你通过 Mutator 获取数据成员值的时候是获得的其值的复制还是数据成员的原始指针——这两种情况的区别是，当你获得的是数据成员值的 copy 时，你修改这份 copy 的值后并不会影响数据成员的原值，而如果是原始指针的话则有可能会影响原值，这取决于数据成员是 object 还是原始类型。需要注意的是，copy 只能用在 object 类型的数据成员上，并且该数据成员的类型必须实现了 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Protocols/NSCopying_Protocol/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSCopying Protocol&lt;/a&gt;——这是因为，对于原始类型，当你声明另一个变量名来保存另一个变量保有的值时，默认的就是按值传递，新声明的变量和被保存的变量并不是同一块内存，也就不存在&lt;a href=&quot;http://stackoverflow.com/questions/373419/whats-the-difference-between-passing-by-reference-vs-passing-by-value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;按值传递还是按引用&lt;/a&gt;的问题。对于 object 类型的数据成员，则存在是直接返回原指针给外界还是复制一份后将复制后的新对象的指针给外界的两种选项。总而言之，原始类型的数据成员只有 assign 一个选项，object 类型的存在 copy、assign 两个选项。&lt;/li&gt;
&lt;li&gt;strong（retain）与 weak。这一对选项决定了保有数据成员的指针是强指针还是弱指针。strong 和 retain 的语义等同，是 ARC 出现后 retain 的替代，retain 被用在非 ARC 环境下，在非 ARC 环境下 strong 只是 retain 的另一种写法，现在的代码一律写 strong 即可。保有数据成员的指针是强指针还是弱指针直接影响到 ARC 中的内存管理机制——只要一个对象还被 strong 指针所保有，系统便不会对其进行回收；但若是一个对象被 weak 指针所保有，系统便会对其进行销毁、回收，而该 weak 指针也会被重置为 nil 来防止&lt;a href=&quot;http://en.wikipedia.org/wiki/Dangling_pointer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;野指针&lt;/a&gt;问题的发生。在一些情况中，对象之间会出现相互引用的情况，这个时候若两个对象保有的都是相互的 strong 指针，那这两个对象之间就形成了 strong 指针循环，系统便无论如何都无法回收这两个对象。顺便一提，默认的情况下，局部声明的指针都是 strong 指针。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7827237/what-are-the-default-attributes-for-objective-c-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;默认的 @property 配置&lt;/a&gt;是这样的：atomic、readwrite、strong（retain）、assign，&lt;/strong&gt;这一点请务必记住。若你声明的 property 本身就已经是这个类型的了，就不必要再写出来了。&lt;/p&gt;
&lt;p&gt;这些配置老实说确实是会让初学者比较头疼的，需要时间和实验来帮助我们消化。&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple 的官方文档&lt;/a&gt;有更详细的解释，大家可以看看。&lt;/p&gt;
&lt;h3 id=&quot;synthesize-和-dynamic&quot;&gt;&lt;a href=&quot;#synthesize-和-dynamic&quot; class=&quot;headerlink&quot; title=&quot;@synthesize 和 @dynamic&quot;&gt;&lt;/a&gt;@synthesize 和 @dynamic&lt;/h3&gt;&lt;p&gt;还有两个和 @property 紧密相关的语句——@synthesize 和 @dynamic。&lt;/p&gt;
&lt;p&gt;先说说 @synthesize 语句。&lt;/p&gt;
&lt;p&gt;@synthesize 语句只能被用在 @implementation 代码段中，通过这句语句可以完成某个由 backing instance variable 保存数值的 property 的 backing instance variable 的名字的定制，而默认的 backing instance variable 的名字就是 property 名字前加一个“_”符号。这句话可能有点绕，我们举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码对于 myString 这个 property 使用了默认的 backing instance variable 名字 _myString：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/6249c80a-3ca8-11e6-b265-e7a627b3b17d.jpg&quot; class=&quot;center&quot; width=&quot;900&quot;&gt;
&lt;p&gt;但当我们的代码如下时：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synthesize&lt;/span&gt; myString = holyString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;myString 这个 property 的 backing instance variable 的名字就是 holyString 了：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/6aa5d16a-3ca8-11e6-8f6b-53d82d5f8ec0.jpg&quot; class=&quot;center&quot; width=&quot;900&quot;&gt;
&lt;p&gt;如果将上面的“@synthesize myString = holyString;”改为“@synthesize myString;”的话，backing instance variable 的名字就是 myString 了。&lt;/p&gt;
&lt;p&gt;再来简要地说说 @dynamic 语句。&lt;/p&gt;
&lt;p&gt;正如其名，@dynamic 声明了一个“动态”的 property，这个 property 的 Accessor 和 Mutator 将会在别处（父类、子类等地）定义或者在运行时中动态定义。&lt;/p&gt;
&lt;p&gt;Stack Overflow 上的&lt;a href=&quot;http://stackoverflow.com/a/1160526/1516652&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个解释&lt;/a&gt;比较不错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some accessors are created dynamically at runtime, such as certain ones used in CoreData’s NSManagedObject class. If you want to declare and use properties for these cases, but want to avoid warnings about methods missing at compile time, you can use the @dynamic directive instead of @synthesize.&lt;/p&gt;
&lt;p&gt;Using the @dynamic directive essentially tells the compiler “don’t worry about it, a method is on the way.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html#//apple_ref/doc/uid/TP40008048-CH102-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple 的官方文档&lt;/a&gt;也有较为详细的解释。&lt;/p&gt;
&lt;h2 id=&quot;使用-property-时需要注意的问题&quot;&gt;&lt;a href=&quot;#使用-property-时需要注意的问题&quot; class=&quot;headerlink&quot; title=&quot;使用 @property 时需要注意的问题&quot;&gt;&lt;/a&gt;使用 @property 时需要注意的问题&lt;/h2&gt;&lt;p&gt;老实说，由于之前大量用过 Python 这门设计上相对而言更为精良的语言，当我开始使用 Objective-C 后，我一时半会儿有些难以适应。特别是，正如 Java 一样，Objective-C 中存在着大量程序员不友好的设计缺陷，这会让初学者面临各种踩坑的风险。又正如 Java 的思路一样，“语言有缺陷，模式来弥补”，当面对语言的缺陷时，程序员们被要求&lt;strong&gt;记住&lt;/strong&gt;各种“闪避用”的使用模式（姑且认为它们还没有进化到&lt;a href=&quot;http://en.wikipedia.org/wiki/Design_Patterns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计模式&lt;/a&gt;的级别吧）。&lt;/p&gt;
&lt;p&gt;接下来我们就来谈谈和 @property 相关的一些需要注意的问题。&lt;/p&gt;
&lt;h3 id=&quot;在-init-方法中一定要直接访问数据成员&quot;&gt;&lt;a href=&quot;#在-init-方法中一定要直接访问数据成员&quot; class=&quot;headerlink&quot; title=&quot;在 init 方法中一定要直接访问数据成员&quot;&gt;&lt;/a&gt;在 init 方法中一定要直接访问数据成员&lt;/h3&gt;&lt;p&gt;在一个对象的 init 方法中，你一定只能这样初始化各个 property：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _myString = &lt;span class=&quot;string&quot;&gt;@&quot;Futrurama!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而不能这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myString = &lt;span class=&quot;string&quot;&gt;@&quot;Futurama!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 或者 [self setMyString: @&quot;Futurama!&quot;];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么需要这样处理呢？Apple 在官方文档中是这样解释的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Setter methods can have additional side-effects. They may trigger KVC notifications, or perform further tasks if you write your own custom methods.&lt;/p&gt;
&lt;p&gt;You should always access the instance variables directly from within an initialization method because at the time a property is set, the rest of the object may not yet be completely initialized. Even if you don’t provide custom accessor methods or know of any side effects from within your own class, a future subclass may very well override the behavior.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，当你通过 Mutator 来设置一个 property 的值时，由于 @property 声明 property 会对该 property 自动实现 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KVO 的机制&lt;/a&gt;，和该 property 相关联的一些 Observer 的代码可能会被触发——而又由于此时是 init 阶段，可能 Observer 的代码的一些相关依赖条件还没有满足，进而就可能导致不确定性行为。&lt;/p&gt;
&lt;p&gt;###对于 copy 类型的 property，赋值时要用对象的 copy&lt;/p&gt;
&lt;p&gt;在 init 阶段，你一只能这样初始化一个带有 copy 声明的 property：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)initWithSomeOriginalString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)aString &amp;#123;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;        _instanceVariableForCopyProperty = [aString &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而不能这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)initWithSomeOriginalString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)aString &amp;#123;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;        _instanceVariableForCopyProperty = aString;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么需要这样呢？Apple 官方的文档并没有详细解释。我的理解是，当出现下面情况时会出现问题：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; *myString = &lt;span class=&quot;string&quot;&gt;@&quot;Hello&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyObject *object = [[MyObject alloc] initWithSomeOriginalString:myString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 初始化后马上修改 myString，这样 object 保有的值也被改变了，违背了上一行代码只保有 @&quot;Hello&quot; 的意图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myString appendString:&lt;span class=&quot;string&quot;&gt;@&quot; World!&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在-Accessor-和-Mutator-也一定要直接访问数据成员&quot;&gt;&lt;a href=&quot;#在-Accessor-和-Mutator-也一定要直接访问数据成员&quot; class=&quot;headerlink&quot; title=&quot;在 Accessor 和 Mutator 也一定要直接访问数据成员&quot;&gt;&lt;/a&gt;在 Accessor 和 Mutator 也一定要直接访问数据成员&lt;/h3&gt;&lt;p&gt;在 Accessor 和 Mutator 中，一定要这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setMyString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _myString = myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而不能这样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setMyString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myString = myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 或者 [self setMyString:myString];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 或者 return [self myString];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是因为，如果按照后面那种方法来实现 Accessor、Mutator，将会导致 Accessor、Mutator 自己递归地调用自己，最终导致 Stack Overflow：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/72fbba82-3ca8-11e6-8dd3-0b5ae84e435d.jpg&quot; class=&quot;center&quot; width=&quot;900&quot;&gt;
&lt;h3 id=&quot;property-的背后不一定存在-backing-instance-variable&quot;&gt;&lt;a href=&quot;#property-的背后不一定存在-backing-instance-variable&quot; class=&quot;headerlink&quot; title=&quot;property 的背后不一定存在 backing instance variable&quot;&gt;&lt;/a&gt;property 的背后不一定存在 backing instance variable&lt;/h3&gt;&lt;p&gt;在 Apple 的官方文档中对于这个问题是这样描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The compiler will automatically synthesize an instance variable in all situations where it’s also synthesizing at least one accessor method. If you implement both a getter and a setter for a readwrite property, or a getter for a readonly property, the compiler will assume that you are taking control over the property implementation and won’t synthesize an instance variable automatically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你 override 了 readonly 的 property 的 Accessor，或者 readwrite 的 property 的 Accessor 和 Mutator 后，编译器就不会自动地给这些 property 生成 backing instance variable 了：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/7a26944e-3ca8-11e6-9e84-3353bb65614e.jpg&quot; class=&quot;center&quot; width=&quot;900&quot;&gt;
&lt;p&gt;解决这个问题的方法是明确地用 @synthesize 来生成 backing instance variable。&lt;/p&gt;
&lt;p&gt;还有一个很典型的例子发生在利用 Category 机制给已经存在的类添加 property 时：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;MyCategory&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *myStringKey = &amp;amp;myStringKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;BATabBarController&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setMyString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, myStringKey, myString, OBJC_ASSOCIATION_ASSIGN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; objc_getAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, myStringKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码利用 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ObjCRuntimeRef/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Runtime&lt;/a&gt; 的 Associated Object 机制给 UIViewController 添加了我们自己定制的 myString property，并没有用到 backing instance variable。&lt;/p&gt;
&lt;h3 id=&quot;对象的-delegate-不要使用-strong-指针&quot;&gt;&lt;a href=&quot;#对象的-delegate-不要使用-strong-指针&quot; class=&quot;headerlink&quot; title=&quot;对象的 delegate 不要使用 strong 指针&quot;&gt;&lt;/a&gt;对象的 delegate 不要使用 strong 指针&lt;/h3&gt;&lt;p&gt;为了避免 delegate 对象和 delegate 拥有者对象之间的 strong 指针循环，一般最好将 delegate property 声明为 weak 指针保有的：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObjectDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someDelegateMethod:(MyObject *)object;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;MyObjectDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一点在 Apple 官方文档的 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Avoid Strong Reference Cycles&lt;/a&gt; 这一章有详细解释，在这里就不赘述了。&lt;/p&gt;
&lt;h3 id=&quot;weak-指针保有的-property-引起的一些问题&quot;&gt;&lt;a href=&quot;#weak-指针保有的-property-引起的一些问题&quot; class=&quot;headerlink&quot; title=&quot;weak 指针保有的 @property 引起的一些问题&quot;&gt;&lt;/a&gt;weak 指针保有的 @property 引起的一些问题&lt;/h3&gt;&lt;p&gt;在前文我们曾经提到过，对于由 weak 指针保有的对象，当没有其他 strong 指针再保有它时，系统会在必要时将该对象回收，并将 weak 指针重置为 nil。这样的机制给类似于下列形式的代码带来了一个问题：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.weakProperty doSomething];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.weakProperty doSomethingElse];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在 someMethod 被调用时，self.weakProperty 被系统回收后重置为 nil，那接下来的一系列操作可能都不能正常进行，所以我们需要这样处理：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; *strongPointer = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.weakProperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [strongPointer doSomething];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [strongPointer doSomethingElse];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前文已经提到过，局部变量指针默认为 strong 指针。所以，通过上述代码的处理，self.weakProperty 保有的对象就拥有 strongPointer 这个 strong 指针保有，接下来的调用行为就会正常进行了。&lt;/p&gt;
&lt;p&gt;下面的代码也会有类似的问题，你觉得该如何处理呢？&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.weakProperty) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;synthesize-的作用到底是什么&quot;&gt;&lt;a href=&quot;#synthesize-的作用到底是什么&quot; class=&quot;headerlink&quot; title=&quot;@synthesize 的作用到底是什么&quot;&gt;&lt;/a&gt;@synthesize 的作用到底是什么&lt;/h3&gt;&lt;p&gt;从互联网上的&lt;a href=&quot;http://stackoverflow.com/questions/3266467/what-exactly-does-synthesize-do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇 2010 年的帖子&lt;/a&gt;来看，@synthesize 的主要功能是生成 Accessor 和 Mutator，并且指定它们背后的 backing instance variable 的名字。所以我们可以合理地推测像下面的写法就和一个有 backing instance variable 的 property 是等价的了：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setMyString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synthesize&lt;/span&gt; myString = myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而这样写却会报编译错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/Path/To/MyObject.m:13:13: Property implementation must have its declaration in interface ‘MyObject’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于这个问题，在线上给出的解答（&lt;a href=&quot;http://stackoverflow.com/questions/7420100/objective-c-property-implementation-must-have-its-declaration-in-interface&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/questions/12110107/property-implementation-must-have-its-declaration-in-interface-appdelegate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二&lt;/a&gt;）都是说要添加 @property 声明语句就不会出问题了，但是却并没有具体解释原因：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synthesize&lt;/span&gt; myString = myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可是如果在方才代码的基础上不用 @synthesize 语句的话，代码也是正确的，而且 Accessor 和 Mutator 以及默认的 backing instance variable 都会自动生成，就好像 @synthesize 自动被使用了一样：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *myString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MyObject.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;MyObject.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;老实说这些代码行为真的整的人比较头大——太不符合人的直觉了。更为无奈的是，Objective-C 并没有一份权威的 Language Standard/Specification 或者 Language Reference 来解释各个关键语句、关键字确切的行为（Java 都&lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;做的&lt;/a&gt;比它好，那就更别提 Python 是&lt;a href=&quot;https://docs.python.org/2/reference/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;怎么做的&lt;/a&gt;了），只有一份不够详细、不够准确的 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programming with Objective-C&lt;/a&gt;。&lt;strong&gt;Apple 实现的 compiler 这个黑盒子成为了这门语言&lt;a href=&quot;http://stackoverflow.com/questions/10906767/objective-c-standards-document&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;事实上的标准&lt;/a&gt;&lt;/strong&gt;（clang 的线上文档中倒是有一些和 Objective-C 相关的，但是我暂时还没找到 @synthesize 相关的文档），实在是比较遗憾。&lt;/p&gt;
&lt;p&gt;吐槽完毕，我们来解释一下以上代码行为的原因：自 Xcode 4.4 版本所带的编译器 clang 3.2 开始，如果你不为一个 @property 语句写 @synthesize，编译器会自动为该 property 执行 “@synthesize propertyName = _propertyName”，这种编译器行为被称为“default synthesis”：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As of clang 3.2 (circa February 2012), “default synthesis” (or “auto property synthesis”) of Objective-C properties is provided by default. It’s essentially as described in the blog post you originally read: &lt;a href=&quot;http://www.mcubedsw.com/blog/index.php/site/comments/new_objective-c_features/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mcubedsw.com/blog/index.php/site/comments/new_objective-c_features/&lt;/a&gt; (except that that post describes the feature as “enabled, then disabled”; I don’t know if that’s an issue with Xcode or if the clang developers themselves have gone back and forth on the question).&lt;/p&gt;
&lt;p&gt;As far as I know, the only case in which properties will not be default-synthesized in clang 3.2 is when those properties have been inherited from a protocol.&lt;/p&gt;
&lt;p&gt;摘选自救世主 &lt;a href=&quot;http://stackoverflow.com/a/11767553/1516652&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;讨论至此，&lt;strong&gt;我觉得 @synthesize 的作用就只有之前提到的定制 backing instance variable 名字的作用了&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;到这里基本上和 @property 相关的知识我们就总结的差不多了。想要更详细地了解可以去参考 Apple 的 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programming with Objective-C&lt;/a&gt;。如果文档里面有任何问题、错误的话，欢迎大家在评论里面指出。&lt;/p&gt;
&lt;p&gt;最后用我最爱的 &lt;a href=&quot;http://en.wikipedia.org/wiki/Bender_\(Futurama\&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bender&lt;/a&gt;) 结尾：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/8531e7ee-3ca8-11e6-8f7a-9bddeac1d2a0.gif&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;写了一些 iOS 平台上的代码后，我发现自己对于 @property 这个 Objective-C 中很重要、最经常使用的特性不是很熟悉，而这也影响到了我的开发质量。特别是，@property 存在许多选项，nonatomic、weak、assign、copy 等等一系列配置，我弄了很久还是不能分辨清楚，看到开源项目中的用法也会搞不清楚原由，更别提合理地使用。所以我决定好好地研究一下这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://bachiscoding.com/categories/programming/"/>
    
      <category term="objective-c" scheme="http://bachiscoding.com/categories/programming/objective-c/"/>
    
    
  </entry>
  
  <entry>
    <title>关于快速排序算法的一些想法</title>
    <link href="http://bachiscoding.com/2014/12/26/some-thoughts-on-quicksort/"/>
    <id>http://bachiscoding.com/2014/12/26/some-thoughts-on-quicksort/</id>
    <published>2014-12-25T16:52:01.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;作为一个处理问题的很基础的手段，排序在计算机科学的各个方面广泛应用着——例如在查找算法中，如果我们面对的是有序列的话，那么用二分查找我们就倍感顺利、快速，而要获得有序列，首先就得对待查找序列进行排序；又例如，在操作系统的内存管理机制中，内存分配存在&lt;a href=&quot;http://thumbsup2life.blogspot.com/2011/02/best-fit-first-fit-and-worst-fit-memory.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;许多策略&lt;/a&gt;，其中一种被称作 First Fit——遍历可用内存，找到第一个大于等于所需内存大小的内存块，在这块内存块中分配所需内存供使用——而为了让遍历的过程更为快速，或者说降低 First Fit 分配策略实现的时间复杂度，我们可以维护一个按可用内存块大小进行降序排序的内存块索引表，当我们分配内存时便总是可以在索引表中第一位得到最大的可用内存块的地址，从而减少遍历时间，而为了维护这个降序的可用内存索引表，在内存的分配的过程中就必须对内存索引表进行以内存大小为主键的排序操作；再例如，在一些 web 后端程序的页面 cache 机制实现中，我们会按照自己的计算标准对各个页面记录下热度，进而让热度高的页面能够被优先缓存到资源有限的 cache 服务器内存中，为了维护这个表，我们就必须定期对该表进行以页面热度为主键进行降序排序操作。类似的例子，常见的、不常见的还有很多。可以说，排序基本上被应用在软件开发的各个层级、领域。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;因为排序在工程实践中是如此重要，优秀的科学家、工程师们发明了许许多多适合于不同场景的&lt;a href=&quot;http://en.wikipedia.org/wiki/Sorting_algorithm#Popular_sorting_algorithmsx`x&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;排序算法&lt;/a&gt;。&lt;a href=&quot;http://en.wikipedia.org/wiki/Tony_Hoare&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tony Hoare&lt;/a&gt; 发明的&lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;快速排序&lt;/a&gt;是其中最有名、应用最广、在面试过程中最经常被考察到的排序算法之一。&lt;/p&gt;
&lt;h2 id=&quot;快速排序使用了分治法&quot;&gt;&lt;a href=&quot;#快速排序使用了分治法&quot; class=&quot;headerlink&quot; title=&quot;快速排序使用了分治法&quot;&gt;&lt;/a&gt;快速排序使用了分治法&lt;/h2&gt;&lt;p&gt;维基百科上的这幅动图很形象地展示了一次快速排序的执行过程：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/d9bf49a6-3ca7-11e6-9c0d-93901e77bd33.gif&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;根据该图，我们可以这样描述快速排序算法的策略：将大问题划分为小问题，而且保证问题的需求以及问题被解决的手段是对于各个问题而言是相同的，这样一来就可以用相同的方式求解各个子问题，等我们解决了所有子问题后，子问题解的组合就是母问题的解。这就是&lt;a href=&quot;http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分治法&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;快速排序利用分解数组来达到排序的目的&quot;&gt;&lt;a href=&quot;#快速排序利用分解数组来达到排序的目的&quot; class=&quot;headerlink&quot; title=&quot;快速排序利用分解数组来达到排序的目的&quot;&gt;&lt;/a&gt;快速排序利用分解数组来达到排序的目的&lt;/h2&gt;&lt;p&gt;当面对一个需要被排序的乱序数组时，我们可以用下面的形式递归地把它分解为一级级的子数组：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(比基准数小的数组成的&lt;strong&gt;前部数组&lt;/strong&gt;)(&lt;strong&gt;基准数&lt;/strong&gt;)(比基准数大的数组成的&lt;strong&gt;后部数组&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的基准数是指按照一定的方式从被分解数组中选出来的某个元素（基准数的挑选是一个很有意思的话题，它直接影响到快排实现的效率，相关讨论见&lt;a href=&quot;http://stackoverflow.com/questions/164163/quicksort-choosing-the-pivot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort#Selection-based_pivoting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二&lt;/a&gt;）。快速排序利用上述结构来分解数组进而达到了排序的目的，然而具体的分解步骤是怎样的呢？用下面的例子可以进一步阐释：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Array: [1, 5, 2, 7, 6, 15, 20, 10, 9, 11, 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;① 第一次分解&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([1, 5, 2, 7, 6]) //小于基准数的元素在其前形成了前部数组，元素之间的顺序没有改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([8]) //选择最后的元素 8 为基准数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([15, 20, 10, 9, 11]) //大于基准数的元素在其后形成了后部数组，元素之间的顺序没有改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;② 再按照上一步的分解方式对前部、后部数组进行分解&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([1, 5, 2]) //这个数组还不是只含两个或两个以下元素的原子数组，可以继续分解&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([6])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([7])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([8])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([10, 9]) //已经被分解为只含两个元素的数组，选择 2 为基准数再操作一次得到的就是有序排列了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([11])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([15, 20])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;③ 至此所有数组都是原子数组了，而且元素的排列已经是有序的了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([2])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([5])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([6])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([7])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([8])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([9])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([10])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([11])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([15])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([20])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ([])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的例子我们不难理解数组分解的具体步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选取一个基准数；&lt;/li&gt;
&lt;li&gt;将数组的元素进行移动，大于基准数的放其前面，小于基准数的放其后面——这样就形成了前部子数组以及后部子数组。前部的所有元素都小于基准数，后部的所有元素都大于基准数；&lt;/li&gt;
&lt;li&gt;在新获得的前部、后部数组上重复 1、2 步骤；&lt;/li&gt;
&lt;li&gt;当数组被分解为最小数组时，选取基准数后分解数组再合并前部、基准数、后部，其结果本身就是有序的了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个需要额外解释的概念是原子数组：当一个数组只含有两个以及两个以下的元素时，对其按照基准数进行分解操作后，获得的结果一定是有序的，这样的数组被称为原子数组。&lt;strong&gt;当然，这个概念并没有哪个权威教材有介绍，是我为了加强理解创造的。&lt;/strong&gt;下面是一个原子数组的分解过程：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Origin: [5, 4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;① -&amp;gt; 分解完后整个元素的排列就是有序的了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [([])([4])([5])]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当数组被分解到原子数组的粒度后，我们再逐层合并结果，最后得到的总合并结果就是原数组元素组成的有序数组了，至此则算法结束。&lt;/p&gt;
&lt;p&gt;##具体实现&lt;/p&gt;
&lt;p&gt;下面是一份来自于维基百科的快速排序的 C 语言实现，它是利用递归来实现的数组分解过程：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; data[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = data[left]; &lt;span class=&quot;comment&quot;&gt;//选取数组的最左边元素作为基准数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ptr = left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = left + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(data[i] &amp;lt;= temp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                data[ptr] = data[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ptr = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i!=j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(data[j] &amp;gt;= temp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        data[ptr] = data[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ptr = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(data[i] &amp;lt;= temp &amp;amp;&amp;amp; i != j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        data[ptr] = data[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ptr = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data[ptr] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(left &amp;lt; ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                quickSort(data, left, ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ptr + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                quickSort(data, ptr + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我记得有一个“都市传说”，是说 90% 的程序员无法在没有辅助信息的情况下徒手写出一个完全没有错误的快速排序，大家可以尝试一下。&lt;/p&gt;
&lt;p&gt;##进一步讨论&lt;/p&gt;
&lt;p&gt;我们继续在一个更有意思的层面上讨论一下快速排序算法——快排和二叉排序树的关系。在快速排序的算法中，利用分治法的思想，我们将大问题（对无序数组排序）分解为了一个二叉树形的问题。这个过程用语言描述不是很方便，我们用图来解释。&lt;/p&gt;
&lt;p&gt;第一次进行问题转化，选出基（准）数，并将问题分解为了子问题 1 和子问题 2：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/f1489bfe-3ca7-11e6-bcc9-0ff48e4bbf9f.jpg&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;第二次，在子问题上进行进一步的相同操作则会形成如下的问题结构：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/f8ab6dea-3ca7-11e6-85df-afdea4e09b83.jpg&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;继续下去，你就会发现，其实原始问题被划分为了一个二叉树形的结构——很完美的是，它甚至还是一个满的完全二叉树。&lt;/p&gt;
&lt;p&gt;我们以数组 [2，5，3，6，1，10，9，7，8，4] 为例子，选取最后一个数字为基（准）数。按照之前的算法进行操作，最后我们得到了如下结构：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/ff14c988-3ca7-11e6-8398-17e607d17a64.jpg&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;这其实本身就是一棵二叉查找树。也就是说，通过快速排序的分治以及递归的处理之后，基（准）数之间存在一个父基数以及子基（准）数的关系，而这个关系结合基（准）数本身的值构成了一个二叉查找树。与其说快排之后我们按照数列的下标进行遍历就得到了排序好的序列，不如说我们按照基（准）数组成的二叉查找树进行了一次按中序进行的遍历——而二叉查找树的中序遍历结果就是有序结果。&lt;/p&gt;
&lt;p&gt;##备注&lt;/p&gt;
&lt;p&gt;这篇文章最早是我在 2011 年写完，并发布于当时的&lt;a href=&quot;http://blog.csdn.net/nieweilin/article/details/6939888&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;上的。我对其内容进行修改、添加，形成了此文。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个处理问题的很基础的手段，排序在计算机科学的各个方面广泛应用着——例如在查找算法中，如果我们面对的是有序列的话，那么用二分查找我们就倍感顺利、快速，而要获得有序列，首先就得对待查找序列进行排序；又例如，在操作系统的内存管理机制中，内存分配存在&lt;a href=&quot;http://thumbsup2life.blogspot.com/2011/02/best-fit-first-fit-and-worst-fit-memory.html&quot;&gt;许多策略&lt;/a&gt;，其中一种被称作 First Fit——遍历可用内存，找到第一个大于等于所需内存大小的内存块，在这块内存块中分配所需内存供使用——而为了让遍历的过程更为快速，或者说降低 First Fit 分配策略实现的时间复杂度，我们可以维护一个按可用内存块大小进行降序排序的内存块索引表，当我们分配内存时便总是可以在索引表中第一位得到最大的可用内存块的地址，从而减少遍历时间，而为了维护这个降序的可用内存索引表，在内存的分配的过程中就必须对内存索引表进行以内存大小为主键的排序操作；再例如，在一些 web 后端程序的页面 cache 机制实现中，我们会按照自己的计算标准对各个页面记录下热度，进而让热度高的页面能够被优先缓存到资源有限的 cache 服务器内存中，为了维护这个表，我们就必须定期对该表进行以页面热度为主键进行降序排序操作。类似的例子，常见的、不常见的还有很多。可以说，排序基本上被应用在软件开发的各个层级、领域。&lt;/p&gt;
    
    </summary>
    
      <category term="computer science" scheme="http://bachiscoding.com/categories/computer-science/"/>
    
      <category term="algorithm" scheme="http://bachiscoding.com/categories/computer-science/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 UIView 的 layoutSubviews 方法</title>
    <link href="http://bachiscoding.com/2014/12/15/when-will-layoutsubviews-be-invoked/"/>
    <id>http://bachiscoding.com/2014/12/15/when-will-layoutsubviews-be-invoked/</id>
    <published>2014-12-15T13:05:29.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;UIKit 的 UIView 是一个非常重要的类，几乎每个尝试 iOS 开发的程序员都会用到它。UIView 本身实现了 &lt;a href=&quot;http://en.wikipedia.org/wiki/Composite_pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Composite Pattern&lt;/a&gt;，所以一个应用的界面最终可以由一群树状组合的 UIView 来组合而成——在这棵 UIView 树的最顶部，是继承于 UIView 的 UIWindow 实例，然后是由 UIWindow 实例保有的 rootViewController 的根 UIView 实例，然后是在该 UIView 实例上的各种各样的子节点 UIView。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;父 UIView 可以拥有自己的子 UIView，自然而然的，父 UIView 就会面对用怎样的策略来布局、排列这些子 UIView 的问题。在 UIView 中，UIKit 的开发者专门提供了 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/index.html#//apple_ref/occ/instm/UIView/layoutSubviews&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;layoutSubviews&lt;/a&gt; 方法来解决这个问题。&lt;/p&gt;
&lt;h2 id=&quot;官方文档的描述&quot;&gt;&lt;a href=&quot;#官方文档的描述&quot; class=&quot;headerlink&quot; title=&quot;官方文档的描述&quot;&gt;&lt;/a&gt;官方文档的描述&lt;/h2&gt;&lt;p&gt;官方文档对于该方法有如下的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(This method) Lays out subviews.&lt;/p&gt;
&lt;p&gt;Subclasses can override this method as needed to perform more precise layout of their subviews. &lt;strong&gt;You should override this method only if the autoresizing and constraint-based behaviors of the subviews DO NOT offer the behavior you want&lt;/strong&gt;. You can use your implementation to set the frame rectangles of your subviews directly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;以上节选自 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIView Class Reference&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Whenever the size of a view changes, UIKit applies the autoresizing behaviors of that view’s subviews and &lt;strong&gt;THEN&lt;/strong&gt; calls the layoutSubviews method of the view to let it make manual changes. You can implement the layoutSubviews method in custom views when the autoresizing behaviors by themselves &lt;strong&gt;DO NOT&lt;/strong&gt; yield the results you want. Your implementation of this method can do any of the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Adjust the size and position of any immediate subviews.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add or remove subviews or Core Animation layers.&lt;/li&gt;
&lt;li&gt;Force a subview to be redrawn by calling its setNeedsDisplay or setNeedsDisplayInRect: method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One place where applications often lay out subviews manually is when implementing a large scrollable area. Because it is impractical to have a single large view for its scrollable content, applications often implement a root view that contains a number of smaller tile views. Each tile represents a portion of the scrollable content. When a scroll event happens, the root view calls its setNeedsLayout method to initiate a layout change. Its layoutSubviews method then repositions the tile views based on the amount of scrolling that occurred. As tiles scroll out of the view’s visible area, the layoutSubviews method moves the tiles to the incoming edge, replacing their contents in the process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;以上节选自 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/CreatingViews/CreatingViews.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;View Programming Guide for iOS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从文档的描述可以看到，layoutSubviews 的主要功能就是让程序员自己实现子 UIViews 的布局算法，从而在需要重新布局的时候，父 UIView 会按照这个流程重新布局自己的子 UIViews。&lt;strong&gt;而且，layoutSubviews 方法只能被系统触发调用，程序员不能手动直接调用该方法。&lt;/strong&gt;要引起该方法的调用，可以调用 UIView 的 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/index.html#//apple_ref/occ/instm/UIView/setNeedsLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setNeedsLayout&lt;/a&gt; 方法来标记一个 UIView。这样一来，在 UI 线程的下次绘制循环中，系统便会调用该 UIView 的 layoutSubviews 方法。&lt;/p&gt;
&lt;h2 id=&quot;使用-layoutSubviews-的实例&quot;&gt;&lt;a href=&quot;#使用-layoutSubviews-的实例&quot; class=&quot;headerlink&quot; title=&quot;使用 layoutSubviews 的实例&quot;&gt;&lt;/a&gt;使用 layoutSubviews 的实例&lt;/h2&gt;&lt;p&gt;一个比较典型的例子来自于 &lt;a href=&quot;https://github.com/robbdimitrov/RDVTabBarController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RDVTabBarController&lt;/a&gt; 项目，它的目标是实现一个提供高定制性的 TabBarController。在这个项目中，作者使用了 layoutSubviews 来控制 TabBar 的子 UIView——TabBarItem 的重新布局，从而达到 TabBar 发生变化时 TabBarItem 的绘制与布局不会出错的目的：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)layoutSubviews &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//在调用 UIView 的 layoutSubviews 方法之前，UIView 的 frame 已经更新了，下面的 frameSize 就是最新的 frame 的 size 属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGSize&lt;/span&gt; frameSize = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.frame.size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; minimumContentHeight = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; minimumContentHeight];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; backgroundView] setFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, frameSize.height - minimumContentHeight,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                            frameSize.width, frameSize.height)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//根据新的 TabBar 的 frameSize 来计算每个 TabBarItem 的新宽度，进而保证在绘制后不会TabBarItem 的宽度超出 TabBar 等问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setItemWidth:roundf((frameSize.width - [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; contentEdgeInsets].left -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; contentEdgeInsets].right) / [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; items] count])];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Layout items&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (RDVTabBarItem *item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; items]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemHeight = [item itemHeight];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!itemHeight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            itemHeight = frameSize.height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//根据最新计算出来的宽、高来设置 TabBarItem 的 frame 属性。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//设置 frame 属性后，如果新设置的 frame 不同于设置之前的 frame，系统会自动调用该 UIView 的 layoutSubviews 方法来重新布局&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [item setFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.contentEdgeInsets.left + (index * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.itemWidth),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  roundf(frameSize.height - itemHeight) - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.contentEdgeInsets.top,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.itemWidth, itemHeight - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.contentEdgeInsets.bottom)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//设置新的 frame 不会引起 UIView 的重绘，所以需要手工强制其重绘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [item setNeedsDisplay];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我在代码中的注释解释了这段代码都做了什么。如果你要实现自己的 layoutSubviews 方法的话，可以参考这个例子的流程。&lt;/p&gt;
&lt;h2 id=&quot;何时被调用&quot;&gt;&lt;a href=&quot;#何时被调用&quot; class=&quot;headerlink&quot; title=&quot;何时被调用&quot;&gt;&lt;/a&gt;何时被调用&lt;/h2&gt;&lt;p&gt;一个曾经让我比较疑惑的问题是，既然我不能手动直接调用该方法，那在什么时候、何种条件下这个方法会被调用呢？&lt;/p&gt;
&lt;p&gt;Stackoverflow 上已经有&lt;a href=&quot;http://stackoverflow.com/questions/728372/when-is-layoutsubviews-called&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;相关的讨论&lt;/a&gt;了（作者在他的&lt;a href=&quot;http://blog.logichigh.com/2011/03/16/when-does-layoutsubviews-get-called/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;上有更详细的描述），并且有一位朋友给出了很不错的解答：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;init does not cause layoutSubviews to be called (duh)&lt;/li&gt;
&lt;li&gt;addSubview causes layoutSubviews to be called on the view being added, the view it’s being added to (target view), and all the subviews of the target&lt;/li&gt;
&lt;li&gt;view setFrame intelligently calls layoutSubviews on the view having its frame set only if the size parameter of the frame is different&lt;/li&gt;
&lt;li&gt;scrolling a UIScrollView causes layoutSubviews to be called on the scrollView, and its superview&lt;/li&gt;
&lt;li&gt;rotating a device only calls layoutSubview on the parent view (the responding viewControllers primary view)&lt;/li&gt;
&lt;li&gt;Resizing a view will call layoutSubviews on its superview&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，layoutSubviews 方法会在这些情况下，在这些 UIView 实例上被调用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;addSubview 被调用时：target view（一定会），以及被添加的 view（第一次调用会）&lt;/li&gt;
&lt;li&gt;更改 UIView 的 frame 时：被更改 frame 的 view（frame 与之前不同时）&lt;/li&gt;
&lt;li&gt;对于 UIScrollView 而言，滚动式：scroll view&lt;/li&gt;
&lt;li&gt;设备的 orientation 改变时：涉及改变的 UIViewController 的 root view&lt;/li&gt;
&lt;li&gt;使用 CGAffineTransformScale 改变 view 的 transform 属性时，view 的 superview：被改变的 view&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然而，根据我自己的实验，上面的描述并不是很完善的。我的两点补充如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次调用 addSubview 的时候，target view 和被添加到 target view 的 view 的 layoutSubviews 方法会被调用。在已经添加完毕后，若 target view 已经拥有该被添加 view，则只有 target view 的 layoutSubviews 方法会被调用。“and all the subviews of the target”这句话是错误的。&lt;/li&gt;
&lt;li&gt;只有 UIView 处于 key window 的 UIView 树中时，该 UIView 的 layoutSubviews 方法才有可能被调用。不在树中的不会被调用。这也是为什么 Stackoverflow 上的讨论中&lt;a href=&quot;http://stackoverflow.com/a/13121202/1516652&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个答案&lt;/a&gt;的第二点会被提出。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;使用 layoutSubviews 可以让应用界面的适应能力更强。如果 UIKit 默认提供的自动布局机制 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto Layout&lt;/a&gt; 不能提供给你想要的 UIView 布局行为，你可以自己定制该方法来决定布局行为。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;UIKit 的 UIView 是一个非常重要的类，几乎每个尝试 iOS 开发的程序员都会用到它。UIView 本身实现了 &lt;a href=&quot;http://en.wikipedia.org/wiki/Composite_pattern&quot;&gt;Composite Pattern&lt;/a&gt;，所以一个应用的界面最终可以由一群树状组合的 UIView 来组合而成——在这棵 UIView 树的最顶部，是继承于 UIView 的 UIWindow 实例，然后是由 UIWindow 实例保有的 rootViewController 的根 UIView 实例，然后是在该 UIView 实例上的各种各样的子节点 UIView。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://bachiscoding.com/categories/programming/"/>
    
      <category term="iOS" scheme="http://bachiscoding.com/categories/programming/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>CALayer 的 position 属性与 anchorPoint 属性间的关系</title>
    <link href="http://bachiscoding.com/2014/11/11/relationship-between-anchor-point-and-position-property-of-calayer/"/>
    <id>http://bachiscoding.com/2014/11/11/relationship-between-anchor-point-and-position-property-of-calayer/</id>
    <published>2014-11-11T08:10:25.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;因为最近在制作自己的独立产品，我学习了一些 iOS 平台的知识。在我的产品界面中，有一个侧边栏需要单独绘制自定义外观，所以这几天我就研究了一下 UIView 的绘制机理以及 Core Animation 中 CALayer 的相关的知识。在 CALayer 中有一个我比较困惑的地方：position 和 anchorPoint 之间的关系，以及它们对于动画、UIView 绘制的过程会作出何种影响。在看了一遍官方文档，搜索了一些相关博客文章、帖子后，我有了较为完整的理解。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;position、anchorPoint-的定义及属性&quot;&gt;&lt;a href=&quot;#position、anchorPoint-的定义及属性&quot; class=&quot;headerlink&quot; title=&quot;position、anchorPoint 的定义及属性&quot;&gt;&lt;/a&gt;position、anchorPoint 的定义及属性&lt;/h2&gt;&lt;p&gt;要理解这两个属性，首先要理解 CALayer 中的坐标体系。在 CALayer 系统中，存在两种形式的坐标体系——基于 Point 的和基于 Unit 的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Point-based coordinates: Point-based coordinates are used when specifying values that map &lt;strong&gt;directly to screen coordinates&lt;/strong&gt; or must be specified relative to another layer.&lt;br&gt;&lt;br&gt;&lt;br&gt;Unit-based coordinates: Unit coordinates are used when the value should not be tied to screen coordinates because it is relative to some other value. For example, the layer’s anchorPoint property specifies a point relative to the bounds of the layer itself, which can change. You can think of the unit coordinates as specifying &lt;strong&gt;a percentage of the total possible value&lt;/strong&gt;. Every coordinate in the unit coordinate space has a range of 0.0 to 1.0. For example, along the x-axis, the left edge is at the coordinate 0.0 and the right edge is at the coordinate 1.0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Point-based coordinates 实际上就是 UIView 中的 bounds、center、frame 使用的坐标体系。Unit-based coordinates 中的坐标点、长度会根据屏幕、设备的不同，对应到不同的 Point-based coordinates 中的坐标点、长度。&lt;/p&gt;
&lt;p&gt;下面正式介绍 position 和 anchorPoint。根据苹果的官方文档的描述，它们的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The position property defines the location of the layer &lt;strong&gt;relative to its parent’s coordinate system&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;&lt;br&gt;The anchor point represents the point from which certain coordinates &lt;strong&gt;originate&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本质上，position 和 anchorPoint 都是其所属的 layer 上的&lt;strong&gt;同一个点&lt;/strong&gt;，在 layer 上、以及 layer 所属的 UIView 对象上进行的动画会围绕该点进行。它们都是 CAPoint 对象，拥有 x、y 属性来表达不同轴上的位置。不同的地方在于，position 是基于 Point 单位，相对于 layer 的 super layer 的 bounds 来定义的；而 anchorPoint 则是基于 Unit 单位，相对于 layer 本身的 bounds 来定义的。尽管坐标单位和相对坐标系不一样，position 和 anchorPoint &lt;strong&gt;最终&lt;/strong&gt;都在屏幕上代表着同一个点。“最终一致”的意思是说，如果在下一次重绘之前，它们的属性被改变了的话，那么在重绘之后，layer 会被系统重新绘制调整位置后，保证它们还是在屏幕上的同样的一个点。之所以系统能够保证这一点，是因为系统可以调整 layer 的 frame.origin，从而保证在调整后，根据新的 frame.origin 配合 anchorPoint 计算出来的在 super layer bounds 中的点和 position 是一样的。&lt;/p&gt;
&lt;p&gt;在默认情况下，独立的 CALayer 对象的 position 是 (0.0, 0.0)，这点在 Apple 的 &lt;a href=&quot;https://developer.apple.com/LIBRARY/ios/documentation/GraphicsImaging/Reference/CALayer_class/index.html#//apple_ref/occ/instp/CALayer/position&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CALayer Reference&lt;/a&gt; 中有提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For new &lt;strong&gt;standalone&lt;/strong&gt; layers, the default position is set to (0.0, 0.0).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;独立的意思是说，该 CALayer 对象不从属于任何 UIView 对象。CALayer 对象的 anchorPoint 会被初始化为 (0.5, 0.5)。在从属于 UIView 对象的 CALayer 对象中，position 也会根据该 anchorPoint 计算出来的自己相应的值，而不再是 (0.0, 0.0)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The default value of this property (anchorPoint) is (0.5, 0.5), which represents the &lt;strong&gt;center&lt;/strong&gt; of the layer’s bounds rectangle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的代码段可以证明我的观点：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CALayer&lt;/span&gt; *standaloneLayer = [[&lt;span class=&quot;built_in&quot;&gt;CALayer&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Standalone layer&#39;s position: x is %f, y is %f.&quot;&lt;/span&gt;, standaloneLayer.position.x, standaloneLayer.position.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Standalone layer&#39;s anchorPoint: x is %f, y is %f.&quot;&lt;/span&gt;, standaloneLayer.anchorPoint.x, standaloneLayer.anchorPoint.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view = [[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s position: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.position.x, view.layer.position.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s anchorPoint: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.anchorPoint.x, view.layer.anchorPoint.y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码执行后的输出如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Standalone layer&amp;apos;s position: x is 0.000000, y is 0.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Standalone layer&amp;apos;s anchorPoint: x is 0.500000, y is 0.500000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s position: x is 100.000000, y is 100.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s anchorPoint: x is 0.500000, y is 0.500000.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;position-和-anchorPoint-的关系&quot;&gt;&lt;a href=&quot;#position-和-anchorPoint-的关系&quot; class=&quot;headerlink&quot; title=&quot;position 和 anchorPoint 的关系&quot;&gt;&lt;/a&gt;position 和 anchorPoint 的关系&lt;/h2&gt;&lt;p&gt;改变 position 或 anchorPoint 都不会影响到另一方，但是都会影响其所属 layer 的 frame.origin 属性。这个设计尽管比较奇怪，但是却最终能够保证 position 和 anchorPoint 的一致性。&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;http://wonderffee.github.io/blog/2013/10/13/understand-anchorpoint-and-position/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;彻底理解 position 与 anchorPoint&lt;/a&gt; 这篇文章的观点，我们可以知道这三个属性之间的计算关系如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;frame.origin.x = position.x - anchorPoint.x * bounds.size.width；  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;frame.origin.y = position.y - anchorPoint.y * bounds.size.height；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在每次修改 position 或者 anchorPoint 后，系统都会根据上述公式来变更 CALayer 对象的 frame.origin，以保证两个属性的一致性。下面的代码段可以佐证我的观点：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view = [[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s frame.origin: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.frame.origin.x, view.layer.frame.origin.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s position: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.position.x, view.layer.position.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s anchorPoint: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.anchorPoint.x, view.layer.anchorPoint.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.layer.anchorPoint = &lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s frame.origin: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.frame.origin.x, view.layer.frame.origin.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s position: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.position.x, view.layer.position.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s anchorPoint: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.anchorPoint.x, view.layer.anchorPoint.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.layer.position = &lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s frame.origin: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.frame.origin.x, view.layer.frame.origin.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s position: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.position.x, view.layer.position.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;View&#39;s layer&#39;s anchorPoint: x is %f, y is %f.&quot;&lt;/span&gt;, view.layer.anchorPoint.x, view.layer.anchorPoint.y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码段的输出结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s frame.origin: x is 0.000000, y is 0.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s position: x is 100.000000, y is 100.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s anchorPoint: x is 0.500000, y is 0.500000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s frame.origin: x is 100.000000, y is 100.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s position: x is 100.000000, y is 100.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s anchorPoint: x is 0.000000, y is 0.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s frame.origin: x is 50.000000, y is 50.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s position: x is 50.000000, y is 50.000000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View&amp;apos;s layer&amp;apos;s anchorPoint: x is 0.000000, y is 0.000000.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到在上述代码执行的过程中，position 和 anchorPoint 都没有被系统改变，只有 frame.origin 被系统所改变。而且，在 frame.origin 改变后，position 和 anchorPoint 在 super layer 的坐标系中又重新指代同一个点了。&lt;/p&gt;
&lt;h2 id=&quot;更直观的例子&quot;&gt;&lt;a href=&quot;#更直观的例子&quot; class=&quot;headerlink&quot; title=&quot;更直观的例子&quot;&gt;&lt;/a&gt;更直观的例子&lt;/h2&gt;&lt;p&gt;进一步地，我们可以在更形象的例子中去展示这个过程。&lt;/p&gt;
&lt;p&gt;下面这个例子演示了一个绿色 UIView 被缩放的过程。在这个例子中，我们可以看到，动画发生的位置总是围绕着 anchorPoint/position 进行，而且系统会在绘制的过程中保证最终两点的重合——这表现为，在动画发生前绿色方块的位置被重置了。例子的运行效果如下：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/9c882dbe-3ca7-11e6-a4e4-9303687b734a.gif&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;例子的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  ViewController.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  FacebookPopPlay&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by winiex on 14/11/10.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright (c) 2014年 winiex. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;ViewController.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *greenView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView = [[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; greenColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//点击一次后，动画开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; *recognizer = [[&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(onTapOnce)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    recognizer.numberOfTapsRequired = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView addGestureRecognizer:recognizer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)onTapOnce &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;anchorPoint: x is %f, y is %f&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.anchorPoint.x, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.anchorPoint.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;position: x is %f, y is %f&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.position.x, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.position.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;frame.origin: x is %f, y is %f&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.frame.origin.x, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.frame.origin.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//动画执行的相关代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.anchorPoint = &lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//如果加上下面这行代码的话，greenView 就不会在动画开始前“跳跃了”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//self.greenView.layer.position = CGPointMake(100, 100);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;anchorPoint: x is %f, y is %f&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.anchorPoint.x, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.anchorPoint.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;position: x is %f, y is %f&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.position.x, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.position.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;frame.origin: x is %f, y is %f&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.frame.origin.x, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.layer.frame.origin.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; delay:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;UIViewAnimationOptionCurveEaseOut&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.greenView.transform = &lt;span class=&quot;built_in&quot;&gt;CGAffineTransformMakeScale&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; completion:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例子的控制台输出结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;anchorPoint: x is 0.500000, y is 0.500000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;position: x is 190.000000, y is 190.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;frame.origin: x is 100.000000, y is 100.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anchorPoint: x is 0.000000, y is 0.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;position: x is 190.000000, y is 190.000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;frame.origin: x is 190.000000, y is 190.000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们加上“self.greenView.layer.position = CGPointMake(100, 100);”这一行代码后，例子最终运行的效果如下：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/a894d5c6-3ca7-11e6-be22-1be1d908e938.gif&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;动画的效果一下子变的自然了。而且，很明显，绿色方块的形变是根据新的 anchorPoint/position 在进行。&lt;/p&gt;
&lt;h2 id=&quot;小问题&quot;&gt;&lt;a href=&quot;#小问题&quot; class=&quot;headerlink&quot; title=&quot;小问题&quot;&gt;&lt;/a&gt;小问题&lt;/h2&gt;&lt;p&gt;在下图中，黑块是绿块的 sublayer，长、宽都是绿块的 1/4，其 position 处在绿块的正中心。怎样调整黑块的 anchorPoint 来完成下图的布局呢？&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/b034b2d8-3ca7-11e6-b22e-a76808f58d3b.jpg&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;根据前文的描述，对于 CALayer 对象的 position 和 anchorPoint 的相关知识总结如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;position 和 anchorPoint 都是其所属的 layer 上的同一个点；&lt;/li&gt;
&lt;li&gt;position 针对 CALayer 对象的 super layer 而言，anchorPoint 针对 CALayer 对象本身而言；&lt;/li&gt;
&lt;li&gt;position 使用基于 Point 的坐标系，anchorPoint 使用基于 Unit 的坐标系；&lt;/li&gt;
&lt;li&gt;系统通过变更 CALayer 对象的 frame.origin 来保证 position 与 anchorPoint 为同一个点。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近在制作自己的独立产品，我学习了一些 iOS 平台的知识。在我的产品界面中，有一个侧边栏需要单独绘制自定义外观，所以这几天我就研究了一下 UIView 的绘制机理以及 Core Animation 中 CALayer 的相关的知识。在 CALayer 中有一个我比较困惑的地方：position 和 anchorPoint 之间的关系，以及它们对于动画、UIView 绘制的过程会作出何种影响。在看了一遍官方文档，搜索了一些相关博客文章、帖子后，我有了较为完整的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://bachiscoding.com/categories/iOS/"/>
    
      <category term="programming" scheme="http://bachiscoding.com/categories/iOS/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>成为一个新手设计师</title>
    <link href="http://bachiscoding.com/2014/10/21/the-way-of-becoming-a-newbie-designer/"/>
    <id>http://bachiscoding.com/2014/10/21/the-way-of-becoming-a-newbie-designer/</id>
    <published>2014-10-21T13:18:53.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;这篇博客是我针对知乎上“&lt;a href=&quot;http://www.zhihu.com/question/22948728&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高三学生自学UI或交互设计需要怎么做？&lt;/a&gt;”这个问题给出的&lt;a href=&quot;http://www.zhihu.com/question/22948728/answer/32234209&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;答案&lt;/a&gt;，算是对自己这段时间瞎玩设计的一个小结吧 :)。&lt;/p&gt;
&lt;p&gt;如果你是以实作而非理论为目标，而且愿意从 UI 设计入门的话，我的建议如下：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;熟悉你需要使用的工具&quot;&gt;&lt;a href=&quot;#熟悉你需要使用的工具&quot; class=&quot;headerlink&quot; title=&quot;熟悉你需要使用的工具&quot;&gt;&lt;/a&gt;熟悉你需要使用的工具&lt;/h2&gt;&lt;p&gt;目前被使用的最广泛的工具是 Adobe Photoshop、Adobe Illustrator 以及 CorelDRAW。先下载试用版，尝试试用一下这些软件，然后挑一款你喜欢的深入学习。你可以找相关的书籍，也可以找互联网上的教程。如果你英文过关的话，你可以去 Google 搜索一些入门教程，比较好的搜索关键词类似于“Adobe Illustrator Tutorial”或者“Adobe Illustrator Tools 101”。&lt;/p&gt;
&lt;p&gt;请记住一点，你使用软件中的工具本身的基本概念一定要熟悉，知道它是在什么场景下做什么用途的即可。刚开始没必要去看类似于《设计中的设计》这样偏向于经验总结以及个人对于设计的感悟的书，因为基本功和设计领域的经验还不够完善，看不懂就变成了常态，比较打击积极性。不过，如果你时间充足，开卷有益 :)。&lt;/p&gt;
&lt;h2 id=&quot;开始大量的练习，最早期以临摹为主&quot;&gt;&lt;a href=&quot;#开始大量的练习，最早期以临摹为主&quot; class=&quot;headerlink&quot; title=&quot;开始大量的练习，最早期以临摹为主&quot;&gt;&lt;/a&gt;开始大量的练习，最早期以临摹为主&lt;/h2&gt;&lt;p&gt; 熟悉了工具的基本（初期真的无需深刻理解）用法——譬如，你可以用 Adobe Illustrator 中的钢笔熟练地画出一个心形，就可以开始大量练习了。刚开始的时候，建议进行大量的临摹。在互联网上可以找到很多一步一步教你使用相关工具去制作设计内容的教材，你可以找一些适合于自己的一步步跟着学。在学习的过程中你会对之前有粗略了解的工具有进一步的理解——这是因为你开始真正地使用它了。在此给你推荐一个网站，上面的教程都比较入流，也比较易懂：&lt;a href=&quot;http://design.tutsplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tuts+ Free Design &amp;amp; Illustration Tutorials&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;学习一种技能，最重要的就是练习练习再练习——不论你处在哪个阶段，如果想要提高，都是需要练习的。看书理解了和实际操作做到了，中间有非常多的努力。&lt;/p&gt;
&lt;p&gt;临摹的目的是为了让你能够对于常用的设计元素进行分析、解构——高亮是通过什么方式做到的？阴影是怎么出来的？那块透明但是又模糊的毛玻璃效果是用什么工具做到的？某些不规则的形状又是怎么做出来的？——这些问题在早期的时候将会是你内心中最大一类的疑问。&lt;/p&gt;
&lt;p&gt;等到你临摹到了一定数量之后，你将对大部分设计技法有一定的了解。拿到一幅别人的设计作品后，你可以比较快地知道作品各个部分的效果是怎么做到的，同时你也能够发现设计作品中普通人不能发现的一些细节。到了这个程度后，你就可以尝试去做自己的设计作品了。&lt;/p&gt;
&lt;h2 id=&quot;参与到一个实际的项目中去&quot;&gt;&lt;a href=&quot;#参与到一个实际的项目中去&quot; class=&quot;headerlink&quot; title=&quot;参与到一个实际的项目中去&quot;&gt;&lt;/a&gt;参与到一个实际的项目中去&lt;/h2&gt;&lt;p&gt;做自己的设计作品，首先要选好一个领域。拿我最熟悉的互联网行业中的设计而言，有 Web UI 设计师、移动端 UI 设计师等等细分方向。不同的设计师需要了解不同的领域知识：Web 端设计师需要了解基本的规范、实现方法、浏览器兼容性、各种常见的 Pattern 、领域内设计趋势等等，移动端则需要了解各家的设计规范（Guideline）、常用控件的展现形式、适配机器相关的一些知识、各种 Pattern、近期的设计趋势等等。先选好自己想要耕耘的领域，进而学习相关的领域知识。当然，在前一个阶段的临摹过程中，你也可能已经接触到了一些相关知识。这就看你怎么根据需求选择自己的临摹对象了。&lt;/p&gt;
&lt;p&gt;然后继续实作。最靠谱的方式，就是去真真切切地参与到一个项目的开发中去。找几个朋友组成小团队或者在社区上找到并加入一些愿意接受菜鸟设计师的小团队做一些东西，等到项目完成，做项目相关的知识和领域相关的知识你一定会收获不少。&lt;/p&gt;
&lt;h2 id=&quot;开始对于自己的迭代开发&quot;&gt;&lt;a href=&quot;#开始对于自己的迭代开发&quot; class=&quot;headerlink&quot; title=&quot;开始对于自己的迭代开发&quot;&gt;&lt;/a&gt;开始对于自己的迭代开发&lt;/h2&gt;&lt;p&gt;进入“做项目 + 学习” -&amp;gt; “总结归纳” -&amp;gt; “做项目 + 学习” -&amp;gt; “总结归纳”……的良性循环之中。这就是大家常说的积累经验的过程。记得多去 Dribbble 这样的站膜拜大神的作品，吸收知识和经验。等到时机成熟，再看一些设计理论相关的书籍，甚至进一步去培养自己的美术功底，都是不错的选择。有空闲的时间了，去钻研一下字体设计、配色、排版甚至是工业设计等纵向、横向领域，也会对自己的提升大有帮助。不要满足于做那个画图的家伙。&lt;/p&gt;
&lt;p&gt;最后放出一些&lt;a href=&quot;https://www.evernote.com/shard/s96/sh/9abe9817-b65d-4586-a7e1-e615f177d2fc/3f09287fc2418a5d3d01a5c5339fab68&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;资源&lt;/a&gt;给你。希望这些自己的经验能够对你有帮助 :)。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客是我针对知乎上“&lt;a href=&quot;http://www.zhihu.com/question/22948728&quot;&gt;高三学生自学UI或交互设计需要怎么做？&lt;/a&gt;”这个问题给出的&lt;a href=&quot;http://www.zhihu.com/question/22948728/answer/32234209&quot;&gt;答案&lt;/a&gt;，算是对自己这段时间瞎玩设计的一个小结吧 :)。&lt;/p&gt;
&lt;p&gt;如果你是以实作而非理论为目标，而且愿意从 UI 设计入门的话，我的建议如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Design" scheme="http://bachiscoding.com/categories/Design/"/>
    
      <category term="Thoughts" scheme="http://bachiscoding.com/categories/Design/Thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>在 Mac OS X 上修改 Microsoft Natural Ergonomic 4000 的 Zoom 键为 Scroll 键</title>
    <link href="http://bachiscoding.com/2014/10/19/microsoft-natural-ergonomic-keyboard-4000-zoom-to-scroll-on-mac-os-x/"/>
    <id>http://bachiscoding.com/2014/10/19/microsoft-natural-ergonomic-keyboard-4000-zoom-to-scroll-on-mac-os-x/</id>
    <published>2014-10-19T08:13:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;p&gt;因为和 Microsoft Natural Ergonomic 4000 配套使用的驱动 IntelliType Pro for Mac 是&lt;strong&gt;微软开发的 Mac OS X 驱动程序&lt;/strong&gt;，所以在功能上它是有一定的残疾度的——譬如它不能在开机的时候自动加载用户配置（= =），进而在开机后你无法使用设置好的相关驱动配置。你有三个选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删掉它。&lt;/li&gt;
&lt;li&gt;每次开机的时候都点击一次配置程序（系统偏好设置 &amp;gt; Microsoft Keyboard）从而加载配置。&lt;/li&gt;
&lt;li&gt;使用 Launchd 在开机的时候，每次都执行一次 “open /Library/PreferencePanes/Microsoft\ Keyboard.prefPane” 命令从而加载相关配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;第三种选择的具体步骤如下：&lt;/p&gt;
&lt;p&gt;Launchd 的启动脚本内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plist&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;KeepAlive&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;SuccessfulExit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;false&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;Label&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;com.bachiscoding.loadmicrosoftkeyboardsettings&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;open /Library/PreferencePanes/Microsoft\ Keyboard.prefPane&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;true&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plist&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;进入 ~/Library/LaunchAgents 目录：cd ~/Library/LaunchAgents/。这个目录保存了你个人的 launchd 启动脚本。&lt;/li&gt;
&lt;li&gt;新建 com.microsoft.ijustloadsettingsforyoumicrosoft.plist 文件。&lt;/li&gt;
&lt;li&gt;在新建的上述文件中加入方才提供的自启动脚本内容，并保存。&lt;/li&gt;
&lt;li&gt;重启验证成功与否。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于是否使用这款&lt;strong&gt;微软开发的 Mac OS X 驱动程序&lt;/strong&gt;，以及如何删除掉这货，你还可以参考&lt;a href=&quot;http://david.rothlis.net/keyboards/microsoft_natural_osx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;作为程序员，我平时接触的最多的工具就是键盘了。有时候，一天可能会有三、四个小时在敲击键盘。工欲善其事，必先利其器，为了保证一定的效率和&lt;a href=&quot;http://en.wikipedia.org/wiki/Repetitive_strain_injury&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;身体的健康&lt;/a&gt;（&lt;a href=&quot;http://pyvideo.org/video/1735/using-python-to-code-by-voice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决之道&lt;/a&gt;），对于键盘的要求还是得有啊。&lt;/p&gt;
&lt;p&gt;我现在长期使用的键盘是 &lt;a href=&quot;http://www.microsoft.com/hardware/en-us/p/natural-ergonomic-keyboard-4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Microsoft Natural Ergonomic 4000&lt;/a&gt;：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/2fcf5f6c-3ca7-11e6-a720-eb6b4f6532f4.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;我是从 &lt;a href=&quot;http://blog.codinghorror.com/keyboarding-microsoft-natural-ergonomic-4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jeff Atwood 的博客文章&lt;/a&gt;中第一次了解到这款键盘的。这款键盘是一款人体工程学键盘，它的左半部分和右半部分的键之间是分开的，这样就可以让键盘中部适度突出，从而保证左右手的按键键程的合理。在键盘的中间，放置了一个 Zoom 键，所以你可以使用它对于需要缩放的内容进行缩放。在键盘的顶部，还有许多功能键可以自行定义。键盘的腕托使用了人造皮革，当你输入的时候，手腕不会像一些机械键盘一样悬空的同时，也比较舒适。&lt;/p&gt;
&lt;p&gt;还在读大学的时候，我在宿舍里使用的键盘就是这个系列的了。去年 9 月份给公司的程序员兄弟们集体采购键盘的时候，给大家推荐的也是这款 4000 型号的键盘。在后来的大量编码工作中，我都是用的它。用这款键盘长时间打字我没有感到手累过，一直对它挺满意。&lt;/p&gt;
&lt;p&gt;比较有意思的是这块键盘中间的那个 Zoom 键。正如方才介绍的，它的功能是用来对内容进行放大、缩小的。然而我第一次见到这个键的时候，对它的期待是可以做类似于滚动网页内容这类工作的快捷键。然而设计师的想法可能和我的不一样，最终它的默认功能是放大、缩小。&lt;/p&gt;
&lt;p&gt;这个默认放大、缩小的 Zoom 键本身功能对于我确实有些鸡肋，我要让它变成一个 Scroll 键。这样的话，用它就可以愉快地浏览网页了——比 Vimium 插件的 j、k 键用起来还拉风。&lt;/p&gt;
&lt;p&gt;由于这款键盘的使用者和喜爱者众多，这个问题已经有很多人解决了。在 Windows 上，只需要参考 &lt;a href=&quot;http://coolshell.cn/articles/2097.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coolshell 上的这篇文章即可&lt;/a&gt;。在 Mac OS X 或者 Linux 上，你可以参考&lt;a href=&quot;http://blog.philippklaus.de/2012/05/microsoft-natural-ergonomic-keyboard-4000-with-mac-os-x-and-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我在自己的 Mac OS X 10.10 上进行了尝试，最终获得了满意的结果。具体的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 Microsoft Natural Ergonomic 4000 的&lt;a href=&quot;http://www.microsoft.com/hardware/en-us/p/natural-ergonomic-keyboard-4000#support&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Support 页面&lt;/a&gt;中下载 IntelliType Pro for Mac 驱动程序。&lt;/li&gt;
&lt;li&gt;安装 IntelliType Pro for Mac 驱动程序。&lt;/li&gt;
&lt;li&gt;进入 ~/Library/Preferences 文件夹：cd ~/Library/Preferences&lt;/li&gt;
&lt;li&gt;备份原始的配置文件：mv com.microsoft.keyboard.pref com.microsoft.keyboard.pref.bak。如果没有该文件可以跳过这步。&lt;/li&gt;
&lt;li&gt;下载修改后的配置文件：wget &lt;a href=&quot;http://scottbezek.com/com.microsoft.keyboard.pref&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://scottbezek.com/com.microsoft.keyboard.pref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;打开 IntelliType Pro for Mac 驱动程序的配置程序：open /Library/PreferencePanes/Microsoft\ Keyboard.prefPane&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完成了这些工作后，你可以打开一个网页，尝试上下推一下 Zoom 键，不出意外的话网页就会跟着一起滚动了。&lt;/p&gt;
&lt;p&gt;当然工作还没有完。安装了 IntelliType Pro for Mac 后，我的 Meta 和 Alt 在键盘上发生了交换。如果你也和我一样，可以在 IntelliType Pro for Mac 驱动程序的键盘配置程序(系统偏好设置 &amp;gt; Microsoft Keyboard)中进行设置：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/393075d2-3ca7-11e6-a01e-bb203f7a6b74.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;尝试勾选 Options 选项中的“Swap Windows and Alt keys”直到符合你的习惯即可。&lt;/p&gt;
&lt;p&gt;另外，IntelliType Pro for Mac 还会改变鼠标中键点击的默认行为——用中键点击 Chrome 中的链接的后不再是新标签打开页面，而是换到下一个程序的窗口。同样的，你可以在 IntelliType Pro for Mac 驱动程序的鼠标配置程序（系统偏好设置 &amp;gt; Microsoft Mouse）中进行设置：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/43f735a0-3ca7-11e6-8bf4-2f782d4f670c.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;点击 Buttons 页面中的“Wheel Button”，然后将“Select a command”改为“Handled by Mac OS”即可恢复为以前的行为。&lt;/p&gt;
&lt;p&gt;利用这些配置工具，你还可以将 Caps Lock 改为左 Ctrl 键，也可以自己配置 Key Binding 和 Favorite Key 等。更多的功能就等你去探索了。&lt;/p&gt;
&lt;h2 id=&quot;关于键盘的一些内容&quot;&gt;&lt;a href=&quot;#关于键盘的一些内容&quot; class=&quot;headerlink&quot; title=&quot;关于键盘的一些内容&quot;&gt;&lt;/a&gt;关于键盘的一些内容&lt;/h2&gt;&lt;p&gt;在最后，给大家推荐一些和键盘相关的内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;李杀网键盘区：&lt;a href=&quot;http://xahlee.info/kbd/keyboarding.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xahlee.info/kbd/keyboarding.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Have Keyboard, Will Program：&lt;a href=&quot;http://blog.codinghorror.com/have-keyboard-will-program/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.codinghorror.com/have-keyboard-will-program/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;键盘恐慌：&lt;a href=&quot;http://ipn.li/kernelpanic/2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ipn.li/kernelpanic/2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mechanical Keyboards：&lt;a href=&quot;https://mechanicalkeyboards.com/index.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mechanicalkeyboards.com/index.php&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;p&gt;因为和 Microsoft Natural Ergonomic 4000 配套使用的驱动 IntelliType Pro for Mac 是&lt;strong&gt;微软开发的 Mac OS X 驱动程序&lt;/strong&gt;，所以在功能上它是有一定的残疾度的——譬如它不能在开机的时候自动加载用户配置（= =），进而在开机后你无法使用设置好的相关驱动配置。你有三个选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删掉它。&lt;/li&gt;
&lt;li&gt;每次开机的时候都点击一次配置程序（系统偏好设置 &amp;gt; Microsoft Keyboard）从而加载配置。&lt;/li&gt;
&lt;li&gt;使用 Launchd 在开机的时候，每次都执行一次 “open /Library/PreferencePanes/Microsoft\ Keyboard.prefPane” 命令从而加载相关配置。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Keyboard" scheme="http://bachiscoding.com/categories/Keyboard/"/>
    
      <category term="Tools" scheme="http://bachiscoding.com/categories/Keyboard/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>用于获取 .gitignore 的 Bash 命令</title>
    <link href="http://bachiscoding.com/2014/10/16/bash-function-to-get-gitignore-easily/"/>
    <id>http://bachiscoding.com/2014/10/16/bash-function-to-get-gitignore-easily/</id>
    <published>2014-10-16T14:02:03.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;新开的项目，按照常理出牌的话，一般都是需要使用 Git 来进行版本控制，以免代码数据丢失的。而使用 Git 的时候，按照常理出牌的话，一般是要给项目添加一个 &lt;a href=&quot;http://git-scm.com/docs/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;.gitignore 文件&lt;/a&gt;，从而使那些不该纳入版本控制的文件能够被 Git 排除在外的。例如，使用 Python 开发的项目一般都需要将 .pyc 文件排除在外；使用编译型语言来开发的项目，一般会将可执行程序、中间编译结果文件等排除在外。&lt;/p&gt;
&lt;p&gt;不加 .gitignore 的话，一般而言后果是很严重的。之前我刚开始接触 Python 开发的时候，就由于没有考虑这些，最后将所有 .pyc 文件都纳入了版本管理，到了后来发现了这个问题后，才不得不手动删除所有目录下的 .pyc 文件：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;find . -name *pyc | xargs rm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更极端的例子发生在我认识的一位哥们身上。那哥们是做 iOS 开发的，习惯也很不错，所以给自己的代码加上了版本管理。可是有一天他忽然发现自己线上的 Git 仓库已经占用了几百兆，而且每次 push 的时候都需要上传很多东西。后来跑过来问我，我和他一起看了一下，最后确定就是把 XCode 的编译结果都纳入版本管理了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好同学一定会给自己的项目添加 .gitignore&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么问题来了。对于不同的项目，因为使用的语言、工具（特别是 IDE）不同，在开发过程中项目所产生的无需加入版本管理的文件就也不同。 如果不能给自己的项目添加一个完善的 .gitignore，迟早有一些没有考虑到的文件会有可能被无意识地加入到版本控制中。为了解决这个问题，我之前一直通过 Google 来搜索相关的文章，最后也总能找到一些符合要求的从而借用过来。不过这种方法终究有点效率低下，不够自动化，所以我也一直不是很满意。&lt;/p&gt;
&lt;p&gt;纠结的情况一直持续着，直到今天我发现了 &lt;a href=&quot;https://www.gitignore.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gitignore.io&lt;/a&gt; 这个服务。gitignore.io 就是专门用来提供完善的 .gitignore 文件服务的。你在它的搜索框中输入符合自己开发情况的搜索条件之后，它就会提供最适合于你的项目的 .gitignore。譬如如果我是 iOS 开发者的话就会搜索：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/fb94069e-3ca6-11e6-a49a-6be3d89c88e1.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;按下 Generate 后，最终得到如下结果：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/04e05766-3ca7-11e6-8177-874c4229f343.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;很赞的想法，很赞的实现！更赞的是，它满足了程序员切实的需求。不过这里还有一个不是很方便的地方：我们只能去 Web 页面拷贝相关的内容，然后再粘贴进我们的 .gitignore 文件中——用过 Vim 的同学都应该很清楚，这个过程是很“赞”的。&lt;/p&gt;
&lt;p&gt;所以，我们需要在 Terminal 中就能够直接获取到 gitignore.io 的内容。最好，还能够直接把这些内容重定向到 .gitignore 文件中，一行命令搞定。很幸运的是，已经&lt;a href=&quot;http://alias.sh/gitignoreio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有人实现了这个想法&lt;/a&gt;，不幸的是，这个实现无法工作 :(。&lt;/p&gt;
&lt;p&gt;嗯，那我就把它修复一下吧。所以，最终的结果是&lt;a href=&quot;https://gist.github.com/Winiex/3a2daad31e513d8e1c8b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这样的&lt;/a&gt;。你只需要将：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; git-ignore-&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;io&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    curl https://www.gitignore.io/api/&lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;加入你的 .bashrc 文件，然后重启 Terminal，输入：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git-ignore-io python &amp;gt; .gitignore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就可以在你的 Python 项目中“一键”加入完备的 .gitignore 了。&lt;/p&gt;
&lt;p&gt;以后妈妈再也不会担心我把无关文件放到版本控制中去了。:)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;新开的项目，按照常理出牌的话，一般都是需要使用 Git 来进行版本控制，以免代码数据丢失的。而使用 Git 的时候，按照常理出牌的话，一般是要给项目添加一个 &lt;a href=&quot;http://git-scm.com/docs/gitignore&quot;&gt;.gitignore 文件&lt;/a&gt;，从而使那些不该纳入版本控制的文件能够被 Git 排除在外的。例如，使用 Python 开发的项目一般都需要将 .pyc 文件排除在外；使用编译型语言来开发的项目，一般会将可执行程序、中间编译结果文件等排除在外。&lt;/p&gt;
&lt;p&gt;不加 .gitignore 的话，一般而言后果是很严重的。之前我刚开始接触 Python 开发的时候，就由于没有考虑这些，最后将所有 .pyc 文件都纳入了版本管理，到了后来发现了这个问题后，才不得不手动删除所有目录下的 .pyc 文件：&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://bachiscoding.com/categories/Shell/"/>
    
      <category term="Git" scheme="http://bachiscoding.com/categories/Shell/Git/"/>
    
      <category term="Tools" scheme="http://bachiscoding.com/categories/Shell/Git/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>在 UEFI 机器上修复了 Arch Linux 和 Windows 8 的双引导</title>
    <link href="http://bachiscoding.com/2013/06/10/fix-arch-linux-windows-dual-boot-on-a-machine-with-uefi/"/>
    <id>http://bachiscoding.com/2013/06/10/fix-arch-linux-windows-dual-boot-on-a-machine-with-uefi/</id>
    <published>2013-06-10T14:39:00.000Z</published>
    <updated>2016-06-27T20:37:16.067Z</updated>
    
    <content type="html">&lt;p&gt;是的，我重装系统了。前天晚上，不知道从哪里来的好奇心的驱使，我在终端上运行了许多 Archer 又爱又恨的“终极命令”：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pacman -Syu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没错，就是这句传说中的系统升级命令。说这句命令是“终极命令”（有人说，“终极命令”不是 &lt;strong&gt;sudo rm / -rf&lt;/strong&gt; 吗？），主要是因为对于菜鸟而言，如果两次升级之间时间间隔过大，你将很有可能遇到各种奇怪的问题。我比较幸运，这次升级一共下载了 1G 左右的软件包，更新完毕后并没有很多大问题出现。最终导致我选择下下策“祭出大杀器重装系统”的原因是，GNOME 更新到了 3.8.1。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;是-GNOME-3-8-1-让我不再相信爱情&quot;&gt;&lt;a href=&quot;#是-GNOME-3-8-1-让我不再相信爱情&quot; class=&quot;headerlink&quot; title=&quot;是 GNOME 3.8.1 让我不再相信爱情&quot;&gt;&lt;/a&gt;是 GNOME 3.8.1 让我不再相信爱情&lt;/h2&gt;&lt;p&gt;更新到了 GNOME 3.8.1 之后，我遇到了这些自己解决不了的问题（水平真的有限啊）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无论如何都不能唤出 Fcitx 输入法的窗口，但是它的 dbus daemon 却一直成功地自启动着&lt;/li&gt;
&lt;li&gt;GNOME 3.8.1 中包含的 gonome-terminal 3.8.1 竟然&lt;strong&gt;&lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?pid=1264078&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不支持透明背景了&lt;/a&gt;&lt;/strong&gt;（这个我真的解决不了了）。&lt;/li&gt;
&lt;li&gt;桌面系统经常会发生莫名其妙的崩溃，就像下面这张图一样：&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/e332aa4c-3ca6-11e6-9692-a74eb999edcd.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;对于 Fcitx 的问题，我寻找了包含配置、Fcitx 版本在内许多原因，最终把问题锁定在了 GNOME 3.8.1 上。于是，我安装了 KDE 桌面（感谢学校教育网的神速）做测试，果然，Fcitx 工作正常了。对于 gnome-terminal 3.8.1 不支持透明背景的问题，或许我可以换用 &lt;a href=&quot;http://software.schmorp.de/pkg/rxvt-unicode.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;urxvt&lt;/a&gt; 这样经典的 terminal emulator 来“弥补遗憾”，但是终究觉得好像人生中缺少了什么 :(。对于最后一个问题的话，我想了好久，解决方案就是抛弃掉 GNOME，转向 KDE（其实是因为各种不爽，蓄谋已久了）。&lt;/p&gt;
&lt;p&gt;可是啊，终究我还是一个对自己的计算机操作系统软件包有洁癖的家伙，如果现在中途转向 KDE，总有一种系统不“干净”的感觉（好吧，其实我知道很多朋友是同时安装了 GNOME 和 KDE 的）。所以啊，我就纠结地重装系统了。&lt;/p&gt;
&lt;h2 id=&quot;帮助我解决问题的一些资料&quot;&gt;&lt;a href=&quot;#帮助我解决问题的一些资料&quot; class=&quot;headerlink&quot; title=&quot;帮助我解决问题的一些资料&quot;&gt;&lt;/a&gt;帮助我解决问题的一些资料&lt;/h2&gt;&lt;p&gt;因为已经折腾过很多遍 Arch Linux 的安装了，这次按照 &lt;a href=&quot;https://wiki.archlinux.org/index.php/Beginners%27_Guide/Installation_\(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arch Linux Beginners’ Guide&lt;/a&gt;)安装系统可谓驾轻路熟（这句话有避开文档中小陷阱的意思 :)）。最后的问题，却是出在了系统引导上面——或者更直接点说，问题出在了我的电脑是基于 UEFI 主板之上的这个事实。&lt;/p&gt;
&lt;p&gt;记得最开始，我把电脑拿回来开始要装 Arch Linux，并且发现它是 UEFI 的主板时，曾经纠结了很久。问一位玩过很久 Arch Linux 的朋友该怎么办，他也是告诉我“祝你好运”。上次安装成功，完全是瞎猫碰上死耗子了。这次重新安装系统，我决定一定要把安装的过程以及大略的原理进行理解，这样才好。&lt;/p&gt;
&lt;p&gt;最后，还是 Arch Linux 的 Wiki 和讨论组帮了我的大忙。我发现了下面这些很有价值的资源：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关于 UEFI 的基础知识介绍的 &lt;a href=&quot;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wiki&lt;/a&gt;。在这篇 Wiki 里面，我了解了 UEFI 的来龙去脉、产生原因以及初级知识。&lt;/li&gt;
&lt;li&gt;和 UEFI 息息相关的 GPT 分区格式的介绍 &lt;a href=&quot;https://wiki.archlinux.org/index.php/GUID_Partition_Table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wiki&lt;/a&gt;。GPT 分区格式我们很熟悉的 &lt;a href=&quot;http://en.wikipedia.org/wiki/Master_boot_record&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MBR&lt;/a&gt; 有很大的不同，刚开始我不了解它们之间的区别，犯了很多错误。&lt;/li&gt;
&lt;li&gt;介绍在 UEFI 机器上安装 Grub2 从而完成多重引导的 &lt;a href=&quot;https://wiki.archlinux.org/index.php/GRUB#UEFI_systems_2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wiki&lt;/a&gt;。虽说，还有安装上更为简单的 &lt;a href=&quot;http://www.rodsbooks.com/refind/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rEFInd&lt;/a&gt; 可以来做系统引导，但是我对 Grub2 有怀旧情节，所以最后还是选择了 Grub2。&lt;/li&gt;
&lt;li&gt;还有讨论组上非常有价值的&lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=145899&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一篇帖子&lt;/a&gt;。在这篇帖子的 6 楼，一位大牛介绍了正确安装的步骤，我从这里获得了很多启发。在此必须表示我的谢意啊！&lt;/li&gt;
&lt;li&gt;阮一峰前辈写过一篇有关&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/02/booting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机启动&lt;/a&gt;的相关知识介绍的博文，我看了之后对以前使用的 MBR 启动方式有了更深入的了解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上次安装过程中，我直接寻找到成功案例，然后按照他们的流程一路做下来，并没有弄懂所有的东西。这次，通过这些资料，我对 UEFI 相关的问题又有了进一步的理解。&lt;/p&gt;
&lt;h2 id=&quot;修复引导的过程&quot;&gt;&lt;a href=&quot;#修复引导的过程&quot; class=&quot;headerlink&quot; title=&quot;修复引导的过程&quot;&gt;&lt;/a&gt;修复引导的过程&lt;/h2&gt;&lt;p&gt;好吧，闲话了两小结（喂…），下面就说一下我修复引导的过程吧。&lt;/p&gt;
&lt;p&gt;首先，我们必须得为 Grub2 在系统磁盘上创建一个保留分区，Grub2 会在系统启动的过程中利用这个分区完成一些工作。在 Wiki 中，有介绍分配该分区的方法的&lt;a href=&quot;https://wiki.archlinux.org/index.php/GRUB#GUID_Partition_Table_.28GPT.29_specific_instructions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;，所以我就不再赘述了。最终，我的 Grub2 保留分区便是下图中的 1M 大小的 sda1：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lsblk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sda      8:0    0 931.5G  0 disk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─sda1   8:1    0     1M  0 part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─sda2   8:2    0   512M  0 part /boot/efi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─sda3   8:3    0   128M  0 part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─sda4   8:4    0    60G  0 part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─sda5   8:5    0   621G  0 part /home/winiex/mnt/alpha&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└─sda6   8:6    0 249.9G  0 part /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sr0     11:0    1  1024M  0 rom&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在划分了 Grub2 的保留分区后，我们接下来要做的工作是为 Grub2 的 UEFI 启动程序划分一个至少 512M 的分区，从而保存相关的 UEFI 启动程序。在系统启动的时候，UEFI 管理程序会寻找到这个启动程序，从而将系统引导的工作转交给它。&lt;/p&gt;
&lt;p&gt;这里存在一个技巧。因为，我想要安装的是 Windows 8 和 Arch Linux 双启动系统，所以理论上来讲，给它们都分配一个启动程序所在的分区是比较科学的。但是，这样的分区我觉得不“优雅”。再加上根据我的研究，UEFI 启动程序所占用的空间并不是很大，所以在一个 512M 大小的分区内同时保存 Windows 8 和 Arch Linux 的 UEFI 启动程序是不会存在问题的。&lt;/p&gt;
&lt;p&gt;所以，我在安装 Arch Linux 之前便安装了 Windows 8，这样 Windows 8 的安装程序会在硬盘中自动分配一个 512M 大小的分区存放它的 UEFI 启动程序，并且这个启动程序是放在一个单独的文件夹里面的。在这之后，我只需要在这个分区里面新建一个文件夹，然后将 Arch Linux 要使用的 Grub2 引导程序安装到这里，最后在 UEFI 管理程序中把它的项目提前，这样就可以开机使用 Grub2 来引导系统了。&lt;/p&gt;
&lt;p&gt;我想你已经发现了，在刚才的那幅 lsblk 结果图中，大小为 512M 的 sda2 便是我存放 UEFI 启动引导程序的分区。在 Arch Linux 中，我将它挂载到了 /boot/efi 下。在这个目录下的文件组织形式是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tree /boot/efi/ -L 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/boot/efi/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── EFI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── arch_grub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── grubx64.efi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── Boot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── bootx64.efi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── Microsoft&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── Boot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 directories, 2 files&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没错，你会发现，我现在的 UEFI 启动程序组织方式就是和我方才描述的方式是一样的。当然，如果你并不想像我这样让两个启动程序存在于一个分区内，你也可以自行重新分一个区来存放 Grub2 的启动程序，相关的资料可以在&lt;a href=&quot;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface#EFI_System_Partition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;找到。无论如何，最后，将这个准备好的分区给挂载到 /boot/efi 上：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir /boot/efi #一般这个目录是不存在的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mount /dev/sdXY /boot/efi #X Y 根据你磁盘的情况进行改变&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完成了这一步之后，我们就可以开始安装 Grub2 提供的 UEFI 启动程序了。安装过程比较简单，在 Wiki 上也存在&lt;a href=&quot;https://wiki.archlinux.org/index.php/GRUB#UEFI_systems_2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;进行介绍，所以我就不再赘述了。需要提醒的是，一定要根据你自己机器的情况，安装相应的 Grub2 程序包。&lt;/p&gt;
&lt;p&gt;安装到了这里，所有的工作很可能就已经完成了。你大可以重新开机，然后查看是否安装成功了。不过，在这之前，你最好进入&lt;a href=&quot;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface#Important_UEFI_Shell_Commands&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个页面&lt;/a&gt;把一些重要的 UEFI Shell 命令记录下来，以备不时之需。&lt;/p&gt;
&lt;p&gt;好，重启系统，如果发现系统的 Boot 设置选项中，多了 Arch Linux 的 Grub2 的选项，那代表你很可能已经成功了，恭喜！而如果你没有发现任何变化，直接就进入 Windows 8 了，那很可能就是因为，安装 Grub2 的过程中，没有成功地自动添加 Boot Entry 到 UEFI 系统管理程序中。这个时候，就得我们手动添加 entry 到系统中去了——而刚才我们记录下来的 UEFI Shell 就派上了用场。那些命令，你只需要按照自己的路径来改动一下再执行即可。更大的问题是，我们在哪里可以使用到 UEFI Shell 呢？这个问题我并没有深入研究过，但是，只要你的安装光盘是成功地以 UEFI 的方式启动了的话，就可以进入 UEFI Shell 来使用相关命令——我使用的 Cinnarch 发行版就是可以的。&lt;/p&gt;
&lt;p&gt;等你将 Entry 添加完毕后，Grub2 就可以正常使用了。&lt;/p&gt;
&lt;p&gt;最后，我们就只剩下一个事情要做了：用 Grub2 来引导 Windows 8 系统的启动。这个无论是手动修改 grub.cfg 还是自动的 os-prober，只要管用就行。使用搜索引擎搜索一下的话肯定可以找到很多资料，所以我也就不多说了 :)。&lt;/p&gt;
&lt;p&gt;嗯，大概的过程，就是这样的。&lt;/p&gt;
&lt;h2 id=&quot;最后我还有一句话&quot;&gt;&lt;a href=&quot;#最后我还有一句话&quot; class=&quot;headerlink&quot; title=&quot;最后我还有一句话&quot;&gt;&lt;/a&gt;最后我还有一句话&lt;/h2&gt;&lt;p&gt;现在，我使用 KDE，妈妈再也不用担心我的系统不稳定了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;是的，我重装系统了。前天晚上，不知道从哪里来的好奇心的驱使，我在终端上运行了许多 Archer 又爱又恨的“终极命令”：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pacman -Syu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没错，就是这句传说中的系统升级命令。说这句命令是“终极命令”（有人说，“终极命令”不是 &lt;strong&gt;sudo rm / -rf&lt;/strong&gt; 吗？），主要是因为对于菜鸟而言，如果两次升级之间时间间隔过大，你将很有可能遇到各种奇怪的问题。我比较幸运，这次升级一共下载了 1G 左右的软件包，更新完毕后并没有很多大问题出现。最终导致我选择下下策“祭出大杀器重装系统”的原因是，GNOME 更新到了 3.8.1。&lt;/p&gt;
    
    </summary>
    
      <category term="UEFI" scheme="http://bachiscoding.com/categories/UEFI/"/>
    
      <category term="Arch Linux" scheme="http://bachiscoding.com/categories/UEFI/Arch-Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>擅长三四门不同领域学科的高人通常具备哪些特质？</title>
    <link href="http://bachiscoding.com/2013/05/10/what-personalities-should-multi-field-experts-have/"/>
    <id>http://bachiscoding.com/2013/05/10/what-personalities-should-multi-field-experts-have/</id>
    <published>2013-05-10T13:34:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/e194d6a8-3ca9-11e6-9c71-0bb3de7d5ab3.png&quot; class=&quot;center&quot;&gt;
&lt;p&gt;这是我在知乎上对于&lt;a href=&quot;http://www.zhihu.com/question/20480645&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;该问题&lt;/a&gt;给出的自己的见解。大抵是倚靠自己的经验而谈，属一家之言，供君参考，希望能够有所帮助。&lt;/p&gt;
&lt;p&gt;看到这个问题，我想到了这个问题：&lt;a href=&quot;http://www.zhihu.com/question/20391994&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;人类历史上有哪些跨界跨领域的知名人士&lt;/a&gt;？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;人类历史上确实出现过超多的跨界大师，但我想，他们做到这些所凭借的特质定不是仅仅依靠自己的智商——据说，爱因斯坦的智商也是仅有 146（我的智商据说都有 136 呢  XD），并不高，但是他却在玩转了物理的同时，依然玩了一辈子的小提琴，并且还进行过一些公开的小型表演（物理学的好、音乐也玩的好的人还真不少，譬如我们可爱的&lt;a href=&quot;http://zh.wikipedia.org/zh-hk/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E8%B2%BB%E6%9B%BC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;费曼叔叔&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;智商只是决定了这个人是否能够做到这些的先决条件之一，而且应该也必不是必要条件之一。还有更多的因素决定了一个人是否能够像题主所说的，擅长三四门不同的学科。&lt;/p&gt;
&lt;p&gt;到现在我并没有读过很多历史人物的传记，所以不能很客观地去旁征博引，进而佐证这些牛人们是因为哪些特质而办到的。我就仅仅谈一谈自己的经历所带来的见解吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先，你得对某一个领域感兴趣，并且持续地去钻研该领域。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有这第一个领域的持续钻研，就没有你后续其他领域学习的基础能力——我将它称之为原动力。虽说不同领域的知识往往相差非常大，但是，在这些领域进行耕耘的本领却是同一个内核，决定了你在不同领域的造诣会有多高。&lt;/p&gt;
&lt;p&gt;很难想象，一个什么事情都没有做到专业的人，会在某一天忽然成为量子物理学家。&lt;/p&gt;
&lt;p&gt;到现在，年方二十的本人，或许唯一较为深入地钻研过的领域，就是编码了。我废寝忘食地去了解各种 coding 方面的知识，并且进一步去学习计算机科学的知识来打好基础、拓宽眼界。这个过程，确实让我锻炼出了许多宝贵的原动力：恒心和毅力，一段时间内绝对的专注，（大多时候利用互联网）发现问题、分析问题、解决问题的能力，以及对于时间的掌控能力等等。&lt;/p&gt;
&lt;p&gt;也就是说，要有开始的领域。然后，这个领域的经历历练了一个人，让他有能力去其他领域成功地闯荡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后，你将发现，单单了解一个领域的知识，自己会是多么地狭隘。想把这个世界看的更明白，你还要去更多的领域学习本领。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;或许许多人对于不同的领域的钻研，往往出发于自己的兴趣。但我并非如此。我进一步去了解经济、历史、文学等等领域的知识，是因为我觉得，这个世界真的好精彩，好复杂，我要看懂它更多，单单只知道写代码，是多么地不够！（这，就是兴趣吧，只不过是对于这个世界的 XD）&lt;/p&gt;
&lt;p&gt;一个仅仅知道编写代码的人，只会成为一个系统里面的 worker，而很难成为设计系统的 architect——因为，对于一个系统的理解，需要你去认知、理解这个世界，去其他领域发现那里的系统（譬如生态系统、经济体系统等）的特点，了解系统运行的规律，发现设计系统的灵感。&lt;/p&gt;
&lt;p&gt;类似的现象也出现在不同的领域，&lt;a href=&quot;http://book.douban.com/subject/1291204/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;许多画家、音乐家愿意去数学领域里面思考作画、作曲的数学美，而许多数学家也很喜欢去艺术里面来发现更多的数学规律&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当你钻研一个领域到一定的程度的时候，你想要去了解这个世界！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再然后，你将发现那些散布于不同领域但是却似曾相识的道理——我们把它称之为哲学。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事物运行都有一些共同的规律，而这些规律总结起来，就是那些我们总觉得太过形而上学，甚至有些迷信色彩的哲学理论。&lt;/p&gt;
&lt;p&gt;然而，根据我的体验，当你按照前面的过程一路走来的时候，那些类似于“认识你自己”这样乍看空洞的语句，是多么的在理！认识你自己，你才知道自己想要什么，你才知道自己未来的路必然的选择是怎样的，你才不会恐慌，不会焦虑。你会淡然地看待这个世界的美、丑，专心地走好你该走的历程。&lt;/p&gt;
&lt;p&gt;到了最后，你会综合不同领域的知识，成为一个真正的智者！&lt;/p&gt;
&lt;p&gt;或许，最后那个阶段，是我在这个追求“人生唯一的目标就是变的多才多艺”的过程中自己特殊的衍生物，但我想，前两个过程，应该有很多朋友和我有类似的经历吧！&lt;/p&gt;
&lt;p&gt;做个总结吧。我觉得，能够在不同领域做到“擅长”这个程度，一个人需要这些：&lt;/p&gt;
&lt;p&gt;最开始，对某一个领域的“痴狂”。这个领域的钻研培养了一个人的以下的优良品质。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;恒心。&lt;/li&gt;
&lt;li&gt;发现问题、分析问题、解决问题的能力。&lt;/li&gt;
&lt;li&gt;专注。&lt;/li&gt;
&lt;li&gt;求知欲。&lt;/li&gt;
&lt;li&gt;最后，对于不同领域知识自己的综合、理解。&lt;/li&gt;
&lt;li&gt;以及更多……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我想，用一句话来概括的话，应该是——&lt;strong&gt;对世界充满好奇，想要了解的更多&lt;/strong&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/e194d6a8-3ca9-11e6-9c71-0bb3de7d5ab3.png&quot; class=&quot;center&quot;&gt;
&lt;p&gt;这是我在知乎上对于&lt;a href=&quot;http://www.zhihu.com/question/20480645&quot;&gt;该问题&lt;/a&gt;给出的自己的见解。大抵是倚靠自己的经验而谈，属一家之言，供君参考，希望能够有所帮助。&lt;/p&gt;
&lt;p&gt;看到这个问题，我想到了这个问题：&lt;a href=&quot;http://www.zhihu.com/question/20391994&quot;&gt;人类历史上有哪些跨界跨领域的知名人士&lt;/a&gt;？&lt;/p&gt;
    
    </summary>
    
      <category term="Thoughts" scheme="http://bachiscoding.com/categories/Thoughts/"/>
    
      <category term="Zhihu" scheme="http://bachiscoding.com/categories/Thoughts/Zhihu/"/>
    
    
  </entry>
  
  <entry>
    <title>人的效率还是机器的效率？</title>
    <link href="http://bachiscoding.com/2013/04/29/thoughts-about-efficiency/"/>
    <id>http://bachiscoding.com/2013/04/29/thoughts-about-efficiency/</id>
    <published>2013-04-29T13:10:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/b1029352-3ca6-11e6-b50f-9bf2fabacd6c.png&quot; class=&quot;center&quot;&gt;
&lt;p&gt;“代码是写给人看的，而机器码才是给机器看的。”&lt;/p&gt;
&lt;p&gt;在给新生进行的培训课程上面，我又一次给尚未对编码世界有任何了解的同学做了如上的阐述，字字铿锵有力，不带半点犹豫。&lt;/p&gt;
&lt;p&gt;想想看来，作为一个现在很多书上都会提到的观点，上面那句话已经成为了像我一样刚入编码世界不久，但是认识不深，却又渴望找寻公理的后生们公认的不二法门了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;于是，我们在平时编写代码的过程中便不断提醒自己，“代码是写给人看的”，所以我们的代码会很服服贴贴地遵循一些大家公认的，会让代码变得更易让人看懂的“规矩”——代码风格、编程范式甚至框架约束等等。&lt;/p&gt;
&lt;p&gt;可这几天转念一想，这句话里面偏偏很可能存在着某种谬论吧。&lt;/p&gt;
&lt;p&gt;暂时先不提这个谬论，我们先来举举现实生活中的例子——这样待会提出这个我觉得有些谬误的谬论的时候，你才不会在思维惯性之下，立马认为我这是一纸胡诌。&lt;/p&gt;
&lt;p&gt;人类可以超脱于其他生物而成为这个星球的最大、最强的宿主，很大的一个原因就是因为我们会利用各种工具。&lt;/p&gt;
&lt;p&gt;古老的牛车、现代的车床等等，都是很经典的工具。但是我们有没有在这些工具上面听到过这类言论呢——为了保证驾驶牛车的农夫的舒适度，我们可以把给牛车配 备的装备的质量降低一些，再把这些节约下来的开支用来给农夫买一个更舒适的牛车坐垫；为了保证车床车工工作的效率，我们可以让车床本身执行一些不必要的操 作——例如让它运行的转速比标准的更慢一些，好让车工能够更精细地操作他的仪器。&lt;/p&gt;
&lt;p&gt;据我所知，在这些比较成熟的工具中（至少存在的历史长于计算机），类似于上述的说法往往是比较荒谬的——因为如果按照上面的说法去进行所谓的提高人工作效率的改变，那往往我们的活儿就没法按时干完了。&lt;/p&gt;
&lt;p&gt;而在软件开发这个行业中，我们一直在走上面所述的在其他领域看来比较荒谬的路——我们一路过来都在把软件开发变成一种对人而言的更为舒适，更为高效的工作，但是却一直都没有把机器工作的效率的提高作为我们的主要发展目标之一。&lt;/p&gt;
&lt;p&gt;这便是我刚才提到的让我有些疑惑的“谬论”。&lt;/p&gt;
&lt;p&gt;让我们看看编程语言的发展路线，便能够更进一步了解这种趋势了。首先我们早期的程序员在纸带上打下一行行代表机器码的孔洞，然后交给机器处理；接着我们发 明了机器码的对应符号语言——汇编语言，让我们走出了“用硬件编写软件”的时代——但是我们终于和原原本本的机器之间有了汇编器这个隔阂；然后我们还是不 满足，发明了抽象层次更高的 C 语言、Pascal 语言等中低级语言，而且后来为了迎合 Object Oriented Programing 的范式，发明了 C++——这些工作让我们的代码和机器之间有了编译器和汇编器两层隔阂；接着我们又发明了 Java、C# 这些平台化的语言，于是这些隔阂里面又多了一层解释器；更为近期的动态是，我们发明了完全解释执行的语言——例如 perl、ruby、python 等，而这时我们的代码和机器之间加上了最为笨重的解释执行器；最为极端的是DSL，领域专属语言，例如 SQL——我们甚至都不再告诉机器该怎么做了，而仅仅告诉机器做什么即可（Don’t tell the machine how, just tell the machine what.）——而此时，我们和机器之间的距离就如同在摩天大厦水泥楼顶的人和地面沃土之间的距离了。&lt;/p&gt;
&lt;p&gt;是的，我们一直都在努力，让人的效率变的更高——这么做的代价是让机器的工作效率变的更低。&lt;/p&gt;
&lt;p&gt;不知道大家听说过安迪-比尔定律没有。&lt;/p&gt;
&lt;p&gt;这个定律是目前IT业界发展遵循的三大定律的之一——其他两个定律分别是大名鼎鼎的摩尔定律和它的反定律，反摩尔定律。&lt;/p&gt;
&lt;p&gt;安迪-比尔定律中的安迪指的是 Intel 公司的总裁安迪格罗夫，而比尔就指的是大家都认识的比尔盖茨。定律最简明的阐述是：安迪提供了什么，比尔就拿走了什么。&lt;/p&gt;
&lt;p&gt;什么意思呢？&lt;/p&gt;
&lt;p&gt;一句话概括来说，安迪的 Intel 公司遵循摩尔定律给IT业界带来的 18 个月翻番的计算能力，都被比尔盖茨的新版 Windows 占有、拿走了。&lt;/p&gt;
&lt;p&gt;更通俗点讲，为什么我们需要不停的更新电脑来为微软的最新操作系统铺路呢？为什么和我们两年之前的电脑相比有两倍多的计算能力的新电脑，在今天却还是仅仅只能刚好配的上最新的 Windows——甚至是很勉强的那种呢？&lt;/p&gt;
&lt;p&gt;答案很简单——比尔拿走了安迪费了好大力气整过来的计算能力，而且是以一种很鲁莽的方式——和以前相比越来越低效的、越来越不机器友好的代码。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://book.douban.com/subject/6709783/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;据传闻&lt;/a&gt;，比尔本人也对他的员工发过类似的牢骚——“我早年用汇编搞的 Basic，整个环境也就三百多 k，而你们现在搞的 .NET，大约三百多兆。但是 .NET 真的相对于 Basic 强了一千多倍吗？显然不是。”（如此一说或许真的只在传闻中可得，单单如此来评判编程环境或者系统，是很不公允的。）&lt;/p&gt;
&lt;p&gt;跟着我的叙述，你也应该开始在心目中形成了一种观点——确实，我们软件开发的发展道路过于有些倾向于人的工作效率了——人在这个领域中被溺爱了，而同样很 重要的工具本身被我们打入冷宫，成为了第二个考虑的因素。这个观点的正确与否我们姑且不予置评，但我们应该了解的是它必然存在一定的说服力。&lt;/p&gt;
&lt;p&gt;那现在就引出了一个问题——究竟是人的效率，还是机器的效率更重要？&lt;/p&gt;
&lt;p&gt;关于这个问题，或许会像一些本身就无法下定论的问题一样，大家分成两派，然后进行激烈的讨论甚至辩驳——然而终究是得不出一个一锤子钉死的结论的。&lt;/p&gt;
&lt;p&gt;如果这个问题本身就有它的争执性的话，那我就姑且不班门弄斧说自己是哪个门派的了，我就仅仅阐述自己的几个比较原则性的观点吧。&lt;/p&gt;
&lt;p&gt;第一个是中庸，抑或可以被称之为平衡。如果一个事物有两个都不能割舍的而且相互对立的方面的话，那这个事物发展下去，最终只有一个结果——它们找到平衡，从而让这个事物稳定下来，找到最终的形态。&lt;/p&gt;
&lt;p&gt;第二个来自敏捷宣言，人和交互重于过程和工具。&lt;/p&gt;
&lt;p&gt;第三个是我的 c 语言老师的名言——年轻人要有恒心，敢于深入底层，并知道机器在做什么。你机器在做什么都不知道，那你何来机器跑起来很舒服的代码？&lt;/p&gt;
&lt;p&gt;虽然说我不表达我的支持的论点，但是我想你也应该对我不言自明的想法有一定的了解了吧？&lt;/p&gt;
&lt;p&gt;那，人的效率和机器的效率各自的重要性，你是怎么看的呢？&lt;/p&gt;
&lt;p&gt;###备注&lt;/p&gt;
&lt;p&gt;这篇文章是我大概在两年前所写，当时对于编程语言的了解还是不够深刻，所以文章中存在诸多不够成熟的观点。但文章主旨所关心的机器和人之间的效率权衡问题，现在我还是觉得很值得思考。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/b1029352-3ca6-11e6-b50f-9bf2fabacd6c.png&quot; class=&quot;center&quot;&gt;
&lt;p&gt;“代码是写给人看的，而机器码才是给机器看的。”&lt;/p&gt;
&lt;p&gt;在给新生进行的培训课程上面，我又一次给尚未对编码世界有任何了解的同学做了如上的阐述，字字铿锵有力，不带半点犹豫。&lt;/p&gt;
&lt;p&gt;想想看来，作为一个现在很多书上都会提到的观点，上面那句话已经成为了像我一样刚入编码世界不久，但是认识不深，却又渴望找寻公理的后生们公认的不二法门了。&lt;/p&gt;
    
    </summary>
    
      <category term="Thoughts" scheme="http://bachiscoding.com/categories/Thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>安装 SimpleCV 以及 Hello World 程序</title>
    <link href="http://bachiscoding.com/2013/04/25/learning-simplecv-the-basics/"/>
    <id>http://bachiscoding.com/2013/04/25/learning-simplecv-the-basics/</id>
    <published>2013-04-25T05:50:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;SimpleCV 是一个完全用 Python 语言编写的 Computer Vision 开源库。因为最近在做和 Computer Vision 有关的毕业设计，所以我要使用它来完成我自己课题中的设想。&lt;/p&gt;
&lt;h2 id=&quot;安装-SimpleCV&quot;&gt;&lt;a href=&quot;#安装-SimpleCV&quot; class=&quot;headerlink&quot; title=&quot;安装 SimpleCV&quot;&gt;&lt;/a&gt;安装 SimpleCV&lt;/h2&gt;&lt;p&gt;安装 SimpleCV 的过程很简单，主要有通过包管理系统和通过源代码来进行安装两种方式。&lt;strong&gt;在写这篇文章的时候（2013-4-22），通过 pip 安装的 SimpleCV 存在&lt;a href=&quot;http://help.simplecv.org/question/300/ioerror-file-not-found-while-trying-display/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个影响使用的 bug&lt;/a&gt;&lt;/strong&gt;，所以我最后使用的是通过 git 仓库下载源代码进而安装的版本。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;通过包管理系统安装&quot;&gt;&lt;a href=&quot;#通过包管理系统安装&quot; class=&quot;headerlink&quot; title=&quot;通过包管理系统安装&quot;&gt;&lt;/a&gt;通过包管理系统安装&lt;/h3&gt;&lt;p&gt;SimpleCV 依赖于一些第三方库：SciPy、NumPy、Pygame、OpenCV 2.3+、IPython 10+、PIL 1.1.7+。在使 SimpleCV 能够顺利运行之前，你需要安装这些库的软件包。在我使用的 Arch Linux 上，通过如下命令来安装这些软件包：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pacman -S python2-numpy opencv2.3.1_a-4 python-pygame ipython2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其它平台的安装方式可以参考&lt;a href=&quot;http://www.simplecv.org/docs/installation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方给出的文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;安装了依赖的第三方库后，就可以开始安装 SimpleCV 了。通过 Python 社区很流行的 &lt;a href=&quot;https://pypi.python.org/pypi/pip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pip&lt;/a&gt; 包管理系统可以很方便地安装 SimpleCV，只需输入如下命令即可：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install simplecv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;通过-Git-仓库源代码安装&quot;&gt;&lt;a href=&quot;#通过-Git-仓库源代码安装&quot; class=&quot;headerlink&quot; title=&quot;通过 Git 仓库源代码安装&quot;&gt;&lt;/a&gt;通过 Git 仓库源代码安装&lt;/h3&gt;&lt;p&gt;我现在使用的 SimpleCV 是通过使用 Git 仓库的源代码来进行安装的。这样做的话，首先，你需要 clone &lt;a href=&quot;https://github.com/sightmachine/SimpleCV&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方的 Git 仓库&lt;/a&gt;中的源代码到本地：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/sightmachine/SimpleCV.git SimpleCV-git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等源代码下载完毕后，就可以安装 SimpleCV 了（需要提醒的是，你必须安装 Python 的包安装工具 &lt;a href=&quot;https://pypi.python.org/pypi/setuptools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setuptools&lt;/a&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd SimpleCV-git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo python setup.py install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果存在疑问的话，官方的 Git 仓库的 &lt;a href=&quot;https://github.com/sightmachine/SimpleCV/blob/develop/README.markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;README 文件&lt;/a&gt;中有详细的安装步骤，可以参考之。&lt;/p&gt;
&lt;h2 id=&quot;Hello-World-程序&quot;&gt;&lt;a href=&quot;#Hello-World-程序&quot; class=&quot;headerlink&quot; title=&quot;Hello World 程序&quot;&gt;&lt;/a&gt;Hello World 程序&lt;/h2&gt;&lt;p&gt;刚开始学一门技术，怎么能不动手写写 Hello World 程序来练练手熟悉熟悉呢？这可是祖师爷 K&amp;amp;R 在 C 语言崛起的时代就立下的规矩（笑）。接下来我们就来实现两个 Hello World 类型的程序，权当熟悉 SimpleCV 的基础使用过程。&lt;/p&gt;
&lt;h3 id=&quot;调用摄像头并显示捕获的图像&quot;&gt;&lt;a href=&quot;#调用摄像头并显示捕获的图像&quot; class=&quot;headerlink&quot; title=&quot;调用摄像头并显示捕获的图像&quot;&gt;&lt;/a&gt;调用摄像头并显示捕获的图像&lt;/h3&gt;&lt;p&gt;第一个例子是，使用 SimpleCV 打开电脑的摄像头，然后读取实时图片并显示。实现这个功能的代码极为简单：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Using camera through SimpleCV&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; SimpleCV &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;camera = Camera()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	image = camera.getImage()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	image.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于 Python 语言本身的自解释能力极强，以上的代码是很容易理解的，所以我就不一行一行地作解释了。&lt;/p&gt;
&lt;p&gt;最终的运行结果如下：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/6e17ea56-3ca6-11e6-a0ad-a3d1bcaef2ec.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;h3 id=&quot;从图片中截取小车并保存&quot;&gt;&lt;a href=&quot;#从图片中截取小车并保存&quot; class=&quot;headerlink&quot; title=&quot;从图片中截取小车并保存&quot;&gt;&lt;/a&gt;从图片中截取小车并保存&lt;/h3&gt;&lt;p&gt;在第二个例子中，我们将会从一个图片中切出我们想要的部分，并将这部分保存为一张新图片。我们的素材图片如下：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/7b0db790-3ca6-11e6-9950-577a5d75b1ba.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;我们的目标是，从这幅图里面截取出我们想要的黄色小车所在的一定大小的方形区域。首先，我们导入 SimpleCV 库，并且读入该图片：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; SimpleCV &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;parking_car_image = Image(&lt;span class=&quot;string&quot;&gt;&quot;parking_car.png&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们将小黄车的图片区域截取出来，并最终保存：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yellow_car_image = parking_car_image.crop(&lt;span class=&quot;number&quot;&gt;470&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#小车在图中的位置和大小我们事先已经知晓&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yellow_car_image.save(&lt;span class=&quot;string&quot;&gt;&quot;yellow_car.png&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完整的代码如下（其实好简单，我都想一次给出啊）：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Get yellow car from image.&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; SimpleCV &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;parking_car_image = Image(&lt;span class=&quot;string&quot;&gt;&quot;parking_car.png&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yellow_car_image = parking_car_image.crop(&lt;span class=&quot;number&quot;&gt;470&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#小车在图中的位置和大小我们事先已经知晓&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yellow_car_image.save(&lt;span class=&quot;string&quot;&gt;&quot;yellow_car.png&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终我们截取的图片结果如下：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/8c7b5276-3ca6-11e6-aa29-fbbc4074b9f8.png&quot; class=&quot;center&quot;&gt;
&lt;p&gt;以上两个例子，其实都来自于 &lt;a href=&quot;http://simplecv.org/learn/examples.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SimpleCV 官方给出的样例&lt;/a&gt;。同时，他们在 Github 上也给出了 &lt;a href=&quot;https://github.com/sightmachine/simplecv-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SimpleCV 的样例&lt;/a&gt;，以供初学者研究。如果你觉得这两个例子还不过瘾的话（好样的），可以去找更多的例子研究。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;其实在学习 SimpleCV 之前，我已经研究过&lt;a href=&quot;!--￼11--&quot;&gt;其它的几个 Computer Vision 开源库&lt;/a&gt;了：包括 OpenCV、OpenIMAJ 等。可只有 SimpleCV 让我惊艳了一番——正如它的名字一样，它因为够简单，所以使用起来很舒服。不知道这是不是因为使用 Python 构建的原因（笑）。SimpleCV 的官方文档支持还是比较完善的，另外还有&lt;a href=&quot;http://help.simplecv.org/questions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;支持论坛&lt;/a&gt;来解决用户的问题，很贴心。如果你有一些很疑难的问题的话，可以去那里咨询。&lt;/p&gt;
&lt;p&gt;SimpleCV 对于一些简单的机器学习模型也是有&lt;a href=&quot;http://simplecv.org/docs/SimpleCV.MachineLearning.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一定的支持&lt;/a&gt;的，这个让我很开心啊（因为和我的毕设有关）。&lt;/p&gt;
&lt;p&gt;O’Reilly 出过两本有关利用 Python 来完成 Computer Visoin 任务的书：&lt;a href=&quot;http://book.douban.com/subject/10574101/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programming Computer Vision with Python&lt;/a&gt; 和 &lt;a href=&quot;http://book.douban.com/subject/10759537/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practical Computer Vision with SimpleCV&lt;/a&gt;。如果你想进一步提高的话，可以参阅这两本书。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;SimpleCV 是一个完全用 Python 语言编写的 Computer Vision 开源库。因为最近在做和 Computer Vision 有关的毕业设计，所以我要使用它来完成我自己课题中的设想。&lt;/p&gt;
&lt;h2 id=&quot;安装-SimpleCV&quot;&gt;&lt;a href=&quot;#安装-SimpleCV&quot; class=&quot;headerlink&quot; title=&quot;安装 SimpleCV&quot;&gt;&lt;/a&gt;安装 SimpleCV&lt;/h2&gt;&lt;p&gt;安装 SimpleCV 的过程很简单，主要有通过包管理系统和通过源代码来进行安装两种方式。&lt;strong&gt;在写这篇文章的时候（2013-4-22），通过 pip 安装的 SimpleCV 存在&lt;a href=&quot;http://help.simplecv.org/question/300/ioerror-file-not-found-while-trying-display/&quot;&gt;一个影响使用的 bug&lt;/a&gt;&lt;/strong&gt;，所以我最后使用的是通过 git 仓库下载源代码进而安装的版本。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Vision" scheme="http://bachiscoding.com/categories/Computer-Vision/"/>
    
      <category term="SimpleCV" scheme="http://bachiscoding.com/categories/Computer-Vision/SimpleCV/"/>
    
    
  </entry>
  
  <entry>
    <title>技术人员初入门，该如何突破早期瓶颈？</title>
    <link href="http://bachiscoding.com/2013/04/23/what-should-programmer-do-when-facing-bottleneck/"/>
    <id>http://bachiscoding.com/2013/04/23/what-should-programmer-do-when-facing-bottleneck/</id>
    <published>2013-04-23T13:49:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;这是我在知乎上关于问题“&lt;a href=&quot;http://www.zhihu.com/question/20325677/answer/14764861&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;只会 if, else, 数据库 CRUD 的 Java 程序员如何提升自己？&lt;/a&gt;”给出的答案。其实，这应该就是一个关于早期技术人员怎样突破瓶颈的问题。&lt;/p&gt;
&lt;p&gt;作为一个爱好技术的人，我们最常见的技术入门——或者说技术切入点——就是开发有实际可见结果的应用——因为这个够简单，够有成就感。而无论哪个平台、框架上面的应用开发在现阶段都逃不开楼主所说的，某个编程语言的学习（Java、Ruby、PHP 等），某个数据库（Mysql、Sqlite、Mongodb 等），再加上楼主未曾说的该框架、平台（Rails、Android、IOS 等）的知识的掌握。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;编程语言、数据库、应用开发框架——这三个部分构成了早期从事应用开发的程序员的全部。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以当进行了够多的应用开发后，我们就往往会产生这样的思考——我会写应用了，但是我觉得我学会的技术别人学了也会，我的优势在哪里？我想继续提高，我该怎么走？以及类似于楼主这样更为具体的问题：只会 if、else，数据库 CRUD 的 java 程序员如何提升自己？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我觉得，一句话可以指点这个阶段的开发人员——向上走，向下走。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向上走，指的是进一步学习设计——没错，程序员的工作本质上也是设计&lt;/strong&gt;（只是我们好多人都没有意识到）：代码设计、算法设计、架构设计等等。之所以觉得自己在重复地做事情，是因为你的每次设计都采用了同样的方案——排序？用快排吧；生成实例并且要解耦？嗯，用工厂吧；要提高系统性能、可用性？嗯，用 cache 吧。虽然说利用现有的设计方案是设计人员的必经之路，但是如果一次又一次的重复利用相同的方案，你就会觉得自己并没有提高——虽然对于项目本身来说是安全、可靠的。在学会了基础的应用开发之后，你就算是学会了最基础的设计方法。然后你要提高，就得继续去学习更为优秀的设计方法：代码设计上，我们去参考设计模式；算法设计上，我们去了解针对同一个问题的不同的解决方案的可用场景以及相应的优劣性；架构设计上，我们去探索最适合现在我们应用所处的环境最好的解决方案（听过腾讯一位技术总监的演讲，他们后台的用户数据、关系系统的架构就有自己的选择：例如数据库中的读取尽量没有用到锁）。总之，学会了基本的应用开发，就可以尝试向上走，走“形而上学”的路子。我想楼主应该已经看出来了，我的建议具体化下来的时候，就是去学习设计模式、算法设计、架构设计（现阶段仅仅了解一下就好，将来在实际情况中去实践的话体会更深）等一系列关于设计的知识。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向下走，指的是去了解系统下面的世界&lt;/strong&gt;——也就是说，去学习系统的运行机理，“知道机器在干什么”（我最敬佩的 C 语言老师所言）。一个应用程序运行起来，就得有各种支持它的系统——计算机硬件系统、计算机操作系统、编译系统、语言运行时系统。如果不去了解这些“土壤之下”的机制，你就会觉得自己写的程序有如空中楼阁，不得其中真谛——譬如，同样能达到目的两条语句哪个机器执行的效率最高？哪样的代码组织会导致最终程序执行的崩溃？怎样去避免代码中的内存泄漏？——所谓知其然，不知其所以然也。所以，代码要写的明白，咱就得往下走，去了解底层。我们可以去看看 linux 对于进程的内存、CPU 管理机制是怎样的，从而去优化我们程序的性能；我们可以去看看数据库的存储引擎，从而在深刻理解之后写出更为高效的 SQL 代码，并且进一步对自己的数据库进行设置、调优；我们可以去看看 JVM 是怎样进行垃圾回收的，从而避免 java 中恐怖的隐性内存泄漏。楼主向下走，可以去学习操作系统、计算机体系结构、编译原理以及运行时等知识——你会在学习的过程中对于自己曾经遇到的问题恍然大悟（我就经历过好多回了，每次都高兴不已哈哈）。&lt;/p&gt;
&lt;p&gt;最后再提最重要的一点——&lt;strong&gt;不要把写代码本身作为终极目标，而应该把代码之上、之下的东西弄透&lt;/strong&gt;。我想，这也是区别代码工人和研发工程师的界限之一吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是我在知乎上关于问题“&lt;a href=&quot;http://www.zhihu.com/question/20325677/answer/14764861&quot;&gt;只会 if, else, 数据库 CRUD 的 Java 程序员如何提升自己？&lt;/a&gt;”给出的答案。其实，这应该就是一个关于早期技术人员怎样突破瓶颈的问题。&lt;/p&gt;
&lt;p&gt;作为一个爱好技术的人，我们最常见的技术入门——或者说技术切入点——就是开发有实际可见结果的应用——因为这个够简单，够有成就感。而无论哪个平台、框架上面的应用开发在现阶段都逃不开楼主所说的，某个编程语言的学习（Java、Ruby、PHP 等），某个数据库（Mysql、Sqlite、Mongodb 等），再加上楼主未曾说的该框架、平台（Rails、Android、IOS 等）的知识的掌握。&lt;/p&gt;
    
    </summary>
    
      <category term="Thoughts" scheme="http://bachiscoding.com/categories/Thoughts/"/>
    
      <category term="Zhihu" scheme="http://bachiscoding.com/categories/Thoughts/Zhihu/"/>
    
    
  </entry>
  
  <entry>
    <title>利用 SimpleCV 绘制图片的色深分布直方图</title>
    <link href="http://bachiscoding.com/2013/04/22/learning-simplecv-draw-image-histogram/"/>
    <id>http://bachiscoding.com/2013/04/22/learning-simplecv-draw-image-histogram/</id>
    <published>2013-04-22T12:29:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;在图像处理的过程中，非常重要的一部分便是对图像所包含的色彩进行分析，从而可以获得该图像在整体层面上的相关特征（Feature）。而在色彩分析过程中，色深分布的分析又是极为基础、重要的一部分。在这篇文章里，我们就一起去了解一下色深以及色彩分布直方图的概念，并进一步研究一下怎样用 Python 来对图像进行色彩取值分布分析，并最终将结果转化为分布直方图（使用了 Python 和 SimpleCV 后，这真的是一个很简单的过程）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;色深&quot;&gt;&lt;a href=&quot;#色深&quot; class=&quot;headerlink&quot; title=&quot;色深&quot;&gt;&lt;/a&gt;色深&lt;/h2&gt;&lt;p&gt;在介绍绘制色彩分布直方图之前，我们先回顾下&lt;a href=&quot;https://en.wikipedia.org/wiki/Color_depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;色深（Color Depth）&lt;/a&gt;的概念（我们只粗糙地介绍下，不深究更多的技术细节）。我们已经知道一个常识，那就是，一张最终展示给我们的图片，最终都是由许许多多的&lt;a href=&quot;https://en.wikipedia.org/wiki/Pixel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;像素&lt;/a&gt;所组成的二维平面。不同格式、类型的图片是拥有不同类型的像素单元的——对于灰度图片，每个像素只需要表示该位置的灰度等级，所以只需要一个“数据单元”便可以记录下色彩数据；对于基于最常见的 &lt;a href=&quot;http://en.wikipedia.org/wiki/RGB_color_space&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RGB 色彩空间&lt;/a&gt;的彩色图片，我们需要在每个单元格里面保存红、绿、蓝三种色彩的色彩信息，最终通过不同的“色彩深度”来完成其它颜色的混合生成，所以对于彩色图片而言，至少需要三个色彩单元来分别记录红、绿、蓝色的“色彩深度”。而无论是对于灰度图片像素色彩的“灰度”，还是彩色图片像素三基础色的“色彩深度”，都存在一个取值的问题——也就是我们的“数据单元”保存的数据所能表示的颜色值的值域（0-1、0-15 还是 0-255，或者更大）——通过取不同的值，表达不同等级的灰度或者不同等级的基础色混合方案，最终会显示不同的色彩。而我们知道，计算机中的数据最终都是以二进制位集合的形式来存储的，这里的图像数据存储单元也是如此——灰度或者基础色“色彩深度”的取值最终都是存储在二进制位集合中的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保存色彩基本信息的“数据单元”的位数便被称之为色深。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿我们或多或少听说过的&lt;a href=&quot;http://en.wikipedia.org/wiki/Color_depth#True_color_.2824-bit.29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“真彩色”（True Colors）&lt;/a&gt;色彩存储方案来举例说明：它一共使用了包含 3 个“数据单元”的 24 位来存储色彩信息，而其中用于储存红色、绿色、蓝色的“色彩深度”取值的“数据单元”各占 8 位，那么，“真彩色”色彩存储方案的色深就是 8 位。“真彩色”是现在使用较为广泛的色彩存储方案之一，因为它兼顾了占用空间和显示颜色的广度（也就是&lt;a href=&quot;https://en.wikipedia.org/wiki/Gamut&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;色域&lt;/a&gt;）——“真彩色”所展示的颜色细腻程度已经让人眼无法感觉出色彩和真实色彩之间的差别（这也是它被成为“真彩色”的原因），而使用的 24 位存储空间也符合现实世界中存储容量的情况。当然，除了“真彩色”存储方案外，还有其它色域更窄但占存储空间小或者色域更广但占存储空间更大的存储方案存在，它们的色深进而也是更“浅”或者更“深”的。&lt;/p&gt;
&lt;p&gt;我们可以这样简单地理解：&lt;strong&gt;一张图片的色深代表了它能表达色彩的广度，色深越深，所能表达的色彩广度越大，能够展示的色彩种类越多，但同时所占用的空间越大&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;对于不严谨表述的备注&quot;&gt;&lt;a href=&quot;#对于不严谨表述的备注&quot; class=&quot;headerlink&quot; title=&quot;对于不严谨表述的备注&quot;&gt;&lt;/a&gt;对于不严谨表述的备注&lt;/h3&gt;&lt;p&gt;我们在这里进行的概念解释极为粗糙、感性，出现了“色彩深度”、“数据单元”这些很不规范的表达。更严谨的介绍请参考各关键概念给出的维基百科链接，并进一步根据索引来查找相关权威专著。&lt;/p&gt;
&lt;h2 id=&quot;图像色彩分布直方图&quot;&gt;&lt;a href=&quot;#图像色彩分布直方图&quot; class=&quot;headerlink&quot; title=&quot;图像色彩分布直方图&quot;&gt;&lt;/a&gt;图像色彩分布直方图&lt;/h2&gt;&lt;p&gt;接下来我们再来了解一下&lt;a href=&quot;http://en.wikipedia.org/wiki/Image_histogram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;色彩分布直方图（Image Histogram）&lt;/a&gt;。&lt;strong&gt;简而言之，色彩分布直方图是图像数据在相应色深下色彩取值的分布统计直方图&lt;/strong&gt;。例如，下图便是一张图片仅打开某个基础色&lt;a href=&quot;http://en.wikipedia.org/wiki/Channel_\(digital_image\&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通道&lt;/a&gt;)转化而来的灰度图片的色彩分布直方图（没错，它来自 Photoshop）：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/6587a184-3ca5-11e6-b48f-8fe0239dd2a2.png&quot; class=&quot;center&quot;&gt;
&lt;p&gt;从这张色彩分布直方图中，我们可以看到这个基础色在自己的可取值值域内的分布情况。&lt;strong&gt;这样的基础色取值分布情况是图像很重要的全局特性之一，在图像数据分析、处理上有很重要的应用&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;利用-SimpleCV-获取图像的色彩分布信息&quot;&gt;&lt;a href=&quot;#利用-SimpleCV-获取图像的色彩分布信息&quot; class=&quot;headerlink&quot; title=&quot;利用 SimpleCV 获取图像的色彩分布信息&quot;&gt;&lt;/a&gt;利用 SimpleCV 获取图像的色彩分布信息&lt;/h2&gt;&lt;p&gt;接下来我们将利用 SimpleCV 获取图像的基础色的色彩分布直方图。对于编写代码而言，这是一个非常简单的过程：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; SimpleCV &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lena = Image(&lt;span class=&quot;string&quot;&gt;&#39;lenna&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#我们使用 Lena 图作演示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(red, green, blue) = lena.splitChannels(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#获取 Lena 图的三基础色通道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;red_histogram = red.histogram(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#获取红色通道的分布直方图，参数表示直方图的横轴长度，8 位则有 256 种取值，下同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;green_histogram = green.histogram(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blue_histogram = blue.histogram(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是的，就是这么简单。具体步骤的解释在源码中已经用注释的方式给出，不再赘述。接下来，我们要做的工作便是将这些直方图信息使用工具展示出来。我们使用 matplotlib 来完成这个任务。如果你没有安装这个库的话，请运行如下命令来安装它：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install matplotlib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将使用 matplotlib 的 pyplot 来完成直方图的绘制，并最终保存为图片数据：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; SimpleCV &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ppt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lena = Image(&lt;span class=&quot;string&quot;&gt;&#39;lenna&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#我们使用 Lena 图作演示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(red, green, blue) = lena.splitChannels(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#获取 Lena 图的三基础色通道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;red_histogram = red.histogram(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#获取红色通道的分布直方图，参数表示直方图的横轴长度，8 位则有 256 种取值，下同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;green_histogram = green.histogram(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blue_histogram = blue.histogram(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ppt.bar(range(len(red_histogram)), red_histogram) &lt;span class=&quot;comment&quot;&gt;#将红色通道的分布数据绘制为直方图并保存为图片，下同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ppt.savefig(&lt;span class=&quot;string&quot;&gt;&#39;red_histogram.png&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ppt.bar(range(len(green_histogram)), green_histogram)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ppt.savefig(&lt;span class=&quot;string&quot;&gt;&#39;green_histogram.png&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ppt.bar(range(len(blue_histogram)), blue_histogram)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ppt.savefig(&lt;span class=&quot;string&quot;&gt;&#39;blue_histogram.png&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们最终获得的三个基础色颜色分布直方图如下所示：&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/d18f758c-3ca5-11e6-8824-5723828f2ebb.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;红色通道颜色分布直方图&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/f221d966-3ca5-11e6-9886-ebc0c3115cc7.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;绿色通道颜色分布直方图&lt;/p&gt;
&lt;img src=&quot;http://o9fv3ui6e.bkt.clouddn.com/019d69e6-3ca6-11e6-b9cc-03ee4e957680.png&quot; class=&quot;center&quot; width=&quot;600&quot;&gt;
&lt;p&gt;蓝色通道颜色分布直方图&lt;/p&gt;
&lt;p&gt;到了这里，我们所有的工作便已经完成了——我们成功获取了 Lena 图的三个基础色通道的色彩分布直方图。从图中不难看出，横轴代表了相应基础色的某个取值，而纵轴则代表了整个图片中相应基础色的取值为该值的像素的个数。真的不得不赞一下——这个过程在 SimpleCV 和 matplotlib 的帮助下，变得很简单、很优雅了。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;回顾一下我们现在所做的工作，其实也不算复杂——不过是对于一张图片内的像素进行了一次简单统计工作。但是，问题的关键在于，我们理解了这里面所包含的概念、原理没有。另外，基于色彩分布的图像处理方法是非常多的——譬如图片全局的色温调整、偏色图片的修复等——可见，学会以上所说的这些，还远远不够。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在图像处理的过程中，非常重要的一部分便是对图像所包含的色彩进行分析，从而可以获得该图像在整体层面上的相关特征（Feature）。而在色彩分析过程中，色深分布的分析又是极为基础、重要的一部分。在这篇文章里，我们就一起去了解一下色深以及色彩分布直方图的概念，并进一步研究一下怎样用 Python 来对图像进行色彩取值分布分析，并最终将结果转化为分布直方图（使用了 Python 和 SimpleCV 后，这真的是一个很简单的过程）。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Vision" scheme="http://bachiscoding.com/categories/Computer-Vision/"/>
    
      <category term="SimpleCV" scheme="http://bachiscoding.com/categories/Computer-Vision/SimpleCV/"/>
    
    
  </entry>
  
  <entry>
    <title>和 Computer Vision、Image Processing 有关的工具</title>
    <link href="http://bachiscoding.com/2013/04/21/tools-about-computer-vision-and-image-processing/"/>
    <id>http://bachiscoding.com/2013/04/21/tools-about-computer-vision-and-image-processing/</id>
    <published>2013-04-21T13:03:00.000Z</published>
    <updated>2016-07-06T16:02:43.475Z</updated>
    
    <content type="html">&lt;p&gt;为了完成我的工作，我调研了许多图片处理的相关工具，在这里我将其进行罗列，方便各位参考。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://opencv.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenCV&lt;/a&gt;。OpenCV 应该是被使用地最广泛的开源实现的 Computer Vision 库了。它主要使用 C++ 语言来进行实现，所以推荐使用 C++ 来进行相关的应用开发。同时，OpenCV 也提供了许多其它语言的 bindings：譬如 python、Java 等都有支持。OpenCV 也提供了不同平台的支持：Linux、Windows、Mac OS、Android、iOS 都有 OpenCV 的实现。另外，根据我的调研，OpenCV 也是所有这些 Computer Vison 开源库中，文档最丰富的——就算没有官方资料，也可以搜索到相关的博客、帖子来找到介绍，并且，有一些专门针对 OpenCV 撰写的技术书籍可以供查阅，很省心。如果要说 OpenCV 有哪些劣势的话，我觉得就是它不够完善的其它语言支持——首先是文档资源极为不丰富，而且会因为 bingding 的过程，会产生一些找不到参考资料的疑难问题。而且，bingding 的支持也比较缓慢——就在写这篇博客的两个月前，&lt;a href=&quot;http://opencv.org/opencv-java-api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Desktop的官方支持&lt;/a&gt;才刚刚发布，在这之前只能采用第三方 bingding 库 &lt;a href=&quot;https://code.google.com/p/javacv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaCV&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.openimaj.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenIMAJ&lt;/a&gt;。在最开始寻找 Computer Vison 的解决方案时，我倾向于使用我所最为熟悉的 Java 语言来进行开发。所以，我找到了 OpenIMAJ，并对它进行了一定程度上的研究——到最后完成了一个使用 JRuby 调用 Java 图像处理程序的 Demo。OpenIMAJ 是由 Southampton 大学的电子工程与计算机科学系所主持开发的开源库，曾经获得过 ACM Multimedia 2011 的优胜奖和推荐。OpenIMAJ 的所有的实现都是使用的 Java 语言，所以不存在 OpenCV 的 bingding 过程中各种奇形怪状的问题，并且是完全平台独立的。不过，OpenIMAJ 的文档资源十分不丰富——特别是相关介绍的博客文章，以及相关代码的使用样例——所以如果你像我一样，以前没有过 Computer Vision 领域的开发经验的话，使用起来还是有很大的阻力的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.simplecv.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SimpleCV&lt;/a&gt;。SimpleCV 是使用 Python 语言实现的 Computer Vision 开源库，由 &lt;a href=&quot;http://sightmachine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sight Machine&lt;/a&gt; 的工程师们开发。相对于 OpenIMAJ 而言，它的最大优势在于完全构建于 Python 之上（哈哈），而 &lt;a href=&quot;http://examples.simplecv.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SimpleCV 的文档、代码使用样例、入门教程&lt;/a&gt;相对于 OpenIMAJ 而言，也更为丰富，而且还有一本专门讲述使用 SimpleCV 来进行 Computer Vision 进行的书——&lt;a href=&quot;http://book.douban.com/subject/10759537/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practical Computer Vision with SimpleCV&lt;/a&gt;。最为重要的是，SimpleCV 有一个负责解答疑问的&lt;a href=&quot;http://help.simplecv.org/questions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;问答论坛&lt;/a&gt;，很多实际使用过程中出现的问题在这里都可以找到解答，如果你遇到的问题没有被提出过，也可以在这里提出，相关的开发人员可以告诉你究竟发生了什么。我在使用的过程中便遇到了一个 SimpleCV 本身的 bug 引发的问题，后来便在&lt;a href=&quot;http://help.simplecv.org/question/300/ioerror-file-not-found-while-trying-display/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;找到了解答。不过，正如它的名字所暗示的一样，SimpleCV 提供的功能并没有成熟的 OpenCV 所提供的丰富，而且效率上也自然是没有使用 C++ 实现的 OpenCV 高——我想这也是为何 OpenCV 被广泛地用于真正意义上的工程开发，而其它类似于 SimpleCV 这样的开源库没有的原因吧。在这篇文章里面的例子，便是使用的 SimpleCV。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageMagick&lt;/a&gt;。ImageMagick 和前面两个库不同的是，它是主要专注于数字图像处理任务的工具，主要为通过命令行方式来使用。也就是说，我们可以把它当作以命令行交互形式存在的 PhotoShop。&lt;a href=&quot;http://codingnow.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云风&lt;/a&gt;曾经&lt;a href=&quot;http://weibo.com/2388714105/zoAL3D7IF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推荐过它&lt;/a&gt;，建议程序员们要学会使用它来完成切图等简单的工作——对于程序员来说，这确实应该是很酷的体验。Apress 出过一本介绍 ImageMagick 的书——&lt;a href=&quot;http://book.douban.com/subject/1798283/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Definitive Guide to ImageMagick&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gimp.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gimp&lt;/a&gt;。我想应该有很多使用 Linux 来完成日常工作的朋友都熟悉 Gimp 这款软件吧——没错，它就是很多人所说的 Linux 平台上的 PhotoShop。用它可以完成许多图像处理的工作，而且并非是以 ImageMagick 那种很 Geek 的形式展现——Gimp 是所见即所得的 GUI 交互式软件，所以，大部分朋友如果有图像处理的工作任务的话，不妨一试。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你知道其它有意思的相关工具、程序库的话，不妨在评论里面告诉我 :)。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;为了完成我的工作，我调研了许多图片处理的相关工具，在这里我将其进行罗列，方便各位参考。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://opencv.org/&quot;&gt;OpenCV&lt;/a&gt;。OpenCV 应该是被使用地最广泛的开源实现的 Computer Vision 库了。它主要使用 C++ 语言来进行实现，所以推荐使用 C++ 来进行相关的应用开发。同时，OpenCV 也提供了许多其它语言的 bindings：譬如 python、Java 等都有支持。OpenCV 也提供了不同平台的支持：Linux、Windows、Mac OS、Android、iOS 都有 OpenCV 的实现。另外，根据我的调研，OpenCV 也是所有这些 Computer Vison 开源库中，文档最丰富的——就算没有官方资料，也可以搜索到相关的博客、帖子来找到介绍，并且，有一些专门针对 OpenCV 撰写的技术书籍可以供查阅，很省心。如果要说 OpenCV 有哪些劣势的话，我觉得就是它不够完善的其它语言支持——首先是文档资源极为不丰富，而且会因为 bingding 的过程，会产生一些找不到参考资料的疑难问题。而且，bingding 的支持也比较缓慢——就在写这篇博客的两个月前，&lt;a href=&quot;http://opencv.org/opencv-java-api.html&quot;&gt;Java Desktop的官方支持&lt;/a&gt;才刚刚发布，在这之前只能采用第三方 bingding 库 &lt;a href=&quot;https://code.google.com/p/javacv/&quot;&gt;JavaCV&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Computer Vision" scheme="http://bachiscoding.com/categories/Computer-Vision/"/>
    
    
  </entry>
  
</feed>
